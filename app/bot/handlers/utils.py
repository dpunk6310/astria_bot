import os
import asyncio
from pathlib import Path
from uuid import uuid4

from aiogram import types

from core.backend.api import (
    create_img_path, 
    delete_user_images, 
    get_user,
    create_tune,
    update_user,
)
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.utils.keyboard import InlineKeyboardBuilder
from core.utils.chatgpt import translate_promt2
from core.generation.photo import (
    learn_model_api, 
    wait_for_training, 
    generate_images, 
    wait_for_generation,
)
from core.generation.video import generate_video_from_image
from core.generation.utils import get_random_prompt
from loader import bot


BASE_DIR = Path(__file__).resolve().parent.parent


async def create_referal(user_db: dict, message: types.Message) -> dict:
    if not user_db.get("referal"):
        referal = message.text.split(" ")
        if len(referal) == 2:
            referal = referal[1]
            if referal != str(message.chat.id):
                await update_user(str(message.chat.id), referal=referal)

 
async def download_user_images(m: types.Message):
    photos_path = BASE_DIR / "media" / "photos"
    
    if not os.path.exists(photos_path):
        os.makedirs(photos_path)
        
    if m.photo:
        photo = await bot.get_file(m.photo[-1].file_id)
        file_path = photo.file_path
        output_filename = f"{photos_path}/{uuid4()}_{file_path.replace('photos/', '')}"
        await m.bot.download_file(
            file_path, destination=output_filename
        )
        await create_img_path(
            tg_user_id=str(m.chat.id),
            path=output_filename
        )
    if m.document:
        photo = await m.bot.get_file(m.document.file_id)
        file_path = photo.file_path
        output_filename = f"{photos_path}/{uuid4()}_{file_path.replace('documents/', '')}"
        await m.bot.download_file(
            file_path, destination=output_filename
        )
        await create_img_path(
            tg_user_id=str(m.chat.id),
            path=output_filename
        )
        
        
async def process_learning(
    messages: list[types.Message],
    imgs: list[str],
    gender: str,
):
    print(imgs, gender)
    response = await learn_model_api(imgs, gender)
    tune_id = response.get("id")
    if not tune_id:
        builder = InlineKeyboardBuilder()
        builder.button(
            text="–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
            callback_data="support"
        )
        await messages[-1].answer(
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É", 
            reply_markup=builder.as_markup(),
        )
        return
    training_complete = await wait_for_training(tune_id)
    if training_complete:
        await create_tune(tune_id=str(tune_id), tg_user_id=str(messages[-1].chat.id), gender=gender)
        await update_user(tg_user_id=str(messages[0].chat.id), is_learn_model=False, tune_id=str(tune_id), gender=None)
        await messages[-1].answer(
            """–¢–≤–æ–π –∞–≤–∞—Ç–∞—Ä —Å–æ–∑–¥–∞–Ω ‚òëÔ∏è
–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º! –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∏–ª–∏" –∏–ª–∏ "–†–µ–∂–∏–º –±–æ–≥–∞" –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞.
""", reply_markup=get_main_keyboard()
        )
        for i in imgs:
            try:
                os.remove(i)
            except Exception as err:
                continue


async def save_promt(message: types.Message):
    promt = message.text
    for _ in range(5):
        try:
            promt = translate_promt2(promt)
            if promt:
                break
        except Exception as err:
            continue
    asyncio.create_task(
        update_user(str(message.chat.id), god_mod_text=promt)
    )
    
    
async def run_generation_photo_god_mod(
    call: types.CallbackQuery,
    user_db: dict,
    effect: str
):
    await call.message.answer("–°–æ–∑–¥–∞–µ–º –≤–∞—à–µ —Ñ–æ—Ç–æ, –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ")
    json_file = BASE_DIR / "media" / "promts.json"
    user_prompt = get_random_prompt(json_file=json_file, gender=user_db.get("gender"), category_slug=user_db.get("category"))
    await generate_photos_helper(
        tune_id=user_db.get('tune_id'),
        user_prompt=user_prompt,
        effect=effect,
        call=call
    )
    
    
async def generate_photos_helper(call: types.CallbackQuery, tune_id: str, user_prompt: str, effect: str):
    user_db = await get_user(str(call.message.chat.id))
    new_count_gen = user_db.get("count_generations") - 3
    asyncio.create_task(
        update_user(str(call.message.chat.id), count_generations=new_count_gen)
    )
    
    gen_response = await generate_images(
        tune_id=int(tune_id), 
        promt=user_prompt,
        effect=effect
    )
    if not gen_response or "id" not in gen_response:
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.", reply_markup=get_main_keyboard())
        new_count_gen = user_db.get("count_generations") + 3
        asyncio.create_task(
            update_user(str(call.message.chat.id), count_generations=new_count_gen)
        )
        return

    user_db = await get_user(str(call.message.chat.id))
    prompt_id = gen_response.get("id")
    if user_db.get("count_generations") < 3:
        await call.message.answer("""
<b>–£ –í–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {count_gen} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π!</b>

–ü–æ–ª—É—á–∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –º–∏—Ä—É –ò–ò-—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!  üéÅ  

<b>–ú—ã –¥–∞—Ä–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ!</b>

üéÅ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å 10 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:

1. –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à Instagram: https://www.instagram.com/photopingvin.ai
2. –ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –≤–æ–ª—à–µ–±–Ω—ã–º –ò–ò-—Ñ–æ—Ç–æ –≤ Stories.
3. –û—Ç–º–µ—Ç—å –Ω–∞—Å @photopingvin.ai –∏ –¥–æ–±–∞–≤—å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞: https://t.me/photopingvin_bot?start={user_tg_id}

üéÅ <b>–•–æ—á–µ—à—å 30 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π?</b>

1. –°–æ–∑–¥–∞–π —Å–æ–≤–º–µ—Å—Ç–Ω—ã–π –ø–æ—Å—Ç (—Ñ—É–Ω–∫—Ü–∏—è –°–æ–∞–≤—Ç–æ—Ä—Å—Ç–≤–æ) —Å –Ω–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º @photopingvin.ai
2. –ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–º–∏ –ò–ò-—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è—Ö!

<b>–û—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–≤–æ–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @managerpingvin_ai ‚Äì –∏ –º—ã –Ω–∞—á–∏—Å–ª–∏–º –±–æ–Ω—É—Å–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç!  –ñ–¥—ë–º —Ç–≤–æ–∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã!</b>

*Instagram –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Meta, –ø—Ä–∏–∑–Ω–∞–Ω–Ω–æ–π —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–π –≤ –†–§""".format(
    count_gen=user_db.get("count_generations"), user_tg_id=str(call.message.chat.id)), parse_mode="HTML",
)

    image_urls = await wait_for_generation(prompt_id)
    media_group = MediaGroupBuilder(caption='<a href="https://t.me/photopingvin_bot?start">üñº –°–æ–∑–¥–∞–Ω–æ –≤ –ü–∏–Ω–≥–≤–∏–Ω –ò–ò</a>')
    
    if image_urls:
        for i in image_urls:
            media_group.add(type="photo", media=i, parse_mode="HTML")
    else:
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    
    await bot.send_media_group(chat_id=call.message.chat.id, media=media_group.build())
    await delete_user_images(str(call.message.chat.id))


async def generate_video_from_photo_task(message: types.Message, photo_url: str, user_db: dict):
    
    
    try:
        new_count_gen = user_db.get("count_video_generations") - 1
        asyncio.create_task(
            update_user(str(message.chat.id), count_video_generations=new_count_gen)
        )
        video_url = await generate_video_from_image(photo_url)
        if not video_url:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. üò¢")
            new_count_gen = user_db.get("count_video_generations") + 1
            asyncio.create_task(
                update_user(str(message.chat.id), count_video_generations=new_count_gen)
            )
            return
        
        await message.answer_video(video_url, caption=f"""–í–∞—à–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ! üé•‚ú®
                                   
<a href="https://t.me/photopingvin_bot?start">üñº –°–æ–∑–¥–∞–Ω–æ –≤ –ü–∏–Ω–≥–≤–∏–Ω –ò–ò</a>""")
        
        
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. üò¢")


def get_main_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–°—Ç–∏–ª–∏"), types.KeyboardButton(text="–†–µ–∂–∏–º –±–æ–≥–∞")],
            [types.KeyboardButton(text="–í—ã–±–æ—Ä –∞–≤–∞—Ç–∞—Ä–∞"), types.KeyboardButton(text="–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏")],
            # [types.KeyboardButton(text="–û–∂–∏–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ")],
            # [types.KeyboardButton(text="–î–æ–ø. –æ–ø—Ü–∏–∏"), types.KeyboardButton(text="–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")],
            [types.KeyboardButton(text="–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")],
        ],
        resize_keyboard=True
    )
    
    
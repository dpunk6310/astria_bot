
from aiogram import types, Router, F
from aiogram.utils.keyboard import InlineKeyboardBuilder

from core.backend.api import (
    get_user,
    update_promo,
    get_price_list
)
from core.logger.logger import get_logger

promo_router = Router()

log = get_logger()


@promo_router.message(F.text == "–ü–æ–¥–∞—Ä–∏—Ç—å –ü–∏–Ω–≥–≤–∏–Ω –ò–ò")
async def give_pingvin_handler(message: types.Message):
    price_list = await get_price_list("promo")
    builder = InlineKeyboardBuilder()
    price_str = ""
    for i in price_list:
        sale = i.get("sale", None)
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –≤ –º–æ–¥–µ–ª—å –ø—Ä–∞–π—Å –ª–∏—Å—Ç –∫–æ–ª-–≤–æ –≤–∏–¥–µ–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è promo
        builder.button(
            text=f"{i.get('count')} —Ñ–æ—Ç–æ",
            callback_data=f"inst_payment_{i.get('price')}_0_{i.get('learn_model')}_0_1_{i.get('count')}_{i.get('count_video')}"
        )
        if not sale or sale == "":
            price_str += f"* {i.get('count')} —Ñ–æ—Ç–æ: {i.get('price')}‚ÇΩ\n"
        else:
            price_str += f"* {i.get('count')} —Ñ–æ—Ç–æ: {i.get('price')}‚ÇΩ ({sale})\n"
    builder.adjust(2, 2, 2)
    text = """
–í–∞—Ä–∏–∞–Ω—Ç—ã:
{price_str}
–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç!
""".format(price_str=price_str)
    await message.answer(
        text=text,
        reply_markup=builder.as_markup()
    )
    
    
@promo_router.message(F.text.contains("PROMO_"))
async def activate_promo_handler(message: types.Message):
    response = await update_promo(data={
        "code": message.text,
        "tg_user_id": str(message.chat.id),
        "status": False,
    })
    if not response or not response.get("code"):
        await message.answer(text="–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ –æ–Ω —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω üòï")
        return
    # code = response.get("code")
    # status = response.get("status")
    count_generations = response.get("count_generations")
    count_video_generations = response.get("count_video_generations")
    is_learn_model = bool(response.get("is_learn_model"))
    
    help_text = f"{count_generations} —Ñ–æ—Ç–æ, {count_video_generations} –æ–∂–∏–≤–ª–µ–Ω–∏–µ"
    if is_learn_model:
        help_text = f"{count_generations} —Ñ–æ—Ç–æ, 1 –∞–≤–∞—Ç–∞—Ä, {count_video_generations} –æ–∂–∏–≤–ª–µ–Ω–∏–µ"
    if count_video_generations == 0:
        help_text = f"{count_generations} —Ñ–æ—Ç–æ, 1 –∞–≤–∞—Ç–∞—Ä"
    if not is_learn_model and count_video_generations == 0:
        help_text = f"{count_generations} —Ñ–æ—Ç–æ"
    await message.answer(
        text="""<b>–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b> üêß

–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ:

{help_text}
""".format(help_text=help_text), parse_mode="HTML"
    )


def setup(dp):
    dp.include_router(promo_router)   


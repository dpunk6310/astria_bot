import asyncio
from pathlib import Path

from aiogram import types, Router, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter

from core.backend.api import (
    get_user,
    get_tunes,
    update_user,
    get_categories
)
from .utils import (
    run_generation_photo,
    generate_photos_helper,
    get_main_keyboard,
    generate_photo_from_photo_helper,
)
from loader import bot


class PhotoFromPhoto(StatesGroup):
    photo = State()


gen_photo_router = Router()

BASE_DIR = Path(__file__).resolve().parent.parent


@gen_photo_router.message(F.text == "–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏")
async def generations_stat_callback(message: types.Message, state: FSMContext):
    await state.clear()
    user_db = await get_user(message.chat.id)
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üí≥ –î–æ–∫—É–ø–∏—Ç—å —Ñ–æ—Ç–æ",
        callback_data="prices_photo"
    )
    builder.button(
        text="üí≥ –î–æ–∫—É–ø–∏—Ç—å –æ–∂–∏–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ",
        callback_data="prices_video"
    )
    builder.adjust(1, 1, 1)
    await message.answer(
        text="""
<b>–°–ø–∞—Å–∏–±–æ —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏, —Ç—ã —Ç–∞–∫–æ–π —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–π! –ê —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–º –ª—é–¥—è–º –Ω–∞–¥–æ –¥–µ—Ä–∂–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ</b> üññü§ù‚ù§Ô∏è

–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π —Ñ–æ—Ç–æ: <b>{count_gen}</b>
–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤–∏–¥–µ–æ: <b>{count_video_generations}</b>
""".format(count_gen=user_db.get("count_generations"), count_video_generations=user_db.get("count_video_generations")),
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
  
    
@gen_photo_router.message(F.text == "–°—Ç–∏–ª–∏")
async def styles_effect_handler(message: types.Message, state: FSMContext):
    await state.clear()
    user_db = await get_user(str(message.chat.id))
    if user_db.get("god_mod"):
        await message.answer(text="–†–µ–∂–∏–º –±–æ–≥–∞ –≤—ã–∫–ª—é—á–µ–Ω", reply_markup=get_main_keyboard())
        asyncio.create_task(
            update_user(data={
                "tg_user_id": str(message.chat.id),
                "god_mod": False,
                "god_mod_text": None
            })
        )

    tunes = await get_tunes(str(message.chat.id))
    if not tunes or not user_db.get("gender"):
        builder = InlineKeyboardBuilder()
        builder.button(
            text=f"–î–æ–±–∞–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä",
            callback_data=f"start_upload_photo"
        )
        await message.answer("–£ –í–∞—Å –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ!", reply_markup=builder.as_markup())
        return

    categories = await get_categories(gender=user_db.get("gender"))
    builder = InlineKeyboardBuilder()
    for c in categories:
        builder.button(
            text=c.get("name"),
            callback_data=c.get("slug")
        )
    builder.adjust(2, 2, 2, 2, 2, repeat=True)
    builder.button(
        text="–ù–∞ –≥–ª–∞–≤–Ω—É—é",
        callback_data="home"
    )
    await message.answer(text="""–í—ã–±–µ—Ä–∏ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è —Å—Ç–∏–ª—å –∏ —Ñ–∏–ª—å—Ç—Ä, –ø–æ–ª—É—á–∏—Ç–µ 3 —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥.

–í –∫–∞–∂–¥–æ–º —Å—Ç–∏–ª–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–±–∏—Ä–∞—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º.
""", reply_markup=builder.as_markup())
    
    
async def inst_photo_from_photo_handler(message: types.Message, state: FSMContext):
    await state.set_state(PhotoFromPhoto.photo)
    user_db = await get_user(str(message.chat.id))
    
    if user_db.get("god_mod"):
        await message.answer(text="–†–µ–∂–∏–º –±–æ–≥–∞ –≤—ã–∫–ª—é—á–µ–Ω", reply_markup=get_main_keyboard())
        asyncio.create_task(
            update_user(data={
                "tg_user_id": str(message.chat.id),
                "god_mod": False,
                "god_mod_text": None
            })
        )

    tunes = await get_tunes(str(message.chat.id))
    if not tunes or not user_db.get("gender"):
        builder = InlineKeyboardBuilder()
        builder.button(
            text=f"–î–æ–±–∞–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä",
            callback_data=f"start_upload_photo"
        )
        await message.answer("–£ –í–∞—Å –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ!", reply_markup=builder.as_markup())
        return

    await message.answer_photo(
        photo=types.FSInputFile(BASE_DIR / "media" / "198.png"),
        caption="""<b>–ü–µ—Ä–µ–≤–æ–ø–ª–æ—Ç–∏—Å—å –≤ —Å—Ç–∏–ª–µ –ª—é–±–∏–º–æ–≥–æ —Ñ–æ—Ç–æ!</b> ü§©

‚Äî <b>–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ</b>, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å.
‚Äî –ü–æ–ª—É—á–∏ 2 —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö —Ñ–æ—Ç–æ –≤ —ç—Ç–æ–º —Å—Ç–∏–ª–µ, <b>–Ω–æ —Å —Ç–≤–æ–∏–º –∞–≤–∞—Ç–∞—Ä–æ–º!</b>

–°—Ç–æ–∏–º–æ—Å—Ç—å: –ó–∞ 2 —Ñ–æ—Ç–æ, —Å–ø–∏—à–µ—Ç—Å—è 4 –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.

üëá –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—åüëá
""", parse_mode="HTML")
    
    
@gen_photo_router.message(F.text == "–§–æ—Ç–æ –ø–æ —Ñ–æ—Ç–æ")
async def start_gen_photo_from_photo_handler(message: types.Message, state: FSMContext):
    await inst_photo_from_photo_handler(message, state)


@gen_photo_router.callback_query(F.data == "inst_photo_from_photo")
async def start_gen_photo_from_photo_callback(call: types.CallbackQuery, state: FSMContext):
    await inst_photo_from_photo_handler(call.message, state)
    
    
@gen_photo_router.message(PhotoFromPhoto.photo, F.photo)
async def handle_photo(message: types.Message, state: FSMContext):
    user_db = await get_user(str(message.chat.id))
    
    if user_db.get("count_generations", 0) < 2:
        builder = InlineKeyboardBuilder()
        builder.button(
            text=f"–ö—É–ø–∏—Ç—å",
            callback_data=f"prices_photo"
        )
        await message.answer(f"–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {user_db.get('count_generations')} üò±", reply_markup=builder.as_markup())
        return
    photo = message.photo[-1]
    file_id = photo.file_id
    await state.update_data(file_id=file_id)

    builder = InlineKeyboardBuilder()
    builder.button(
        text="–ö–∏–Ω–æ—ç—Ñ—Ñ–µ–∫—Ç",
        callback_data="Cinematic_effect"
    )
    builder.button(
        text="–ù–µ–æ–Ω",
        callback_data="Neonpunk_effect"
    )
    builder.button(
        text="–ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π",
        callback_data="Photographic_effect"
    )
    builder.button(
        text="–ë–µ–∑ —ç—Ñ—Ñ–µ–∫—Ç–∞",
        callback_data="no_effect"
    )
    
    builder.adjust(1, 1, 1, 1)
    await message.answer(
        text="""<b>–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!</b> üëå

–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç""",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )


@gen_photo_router.callback_query(StateFilter(PhotoFromPhoto.photo), F.data.contains("effect"))
async def handle_effect_photo_to_photo_handler(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    
    data = await state.get_data()
    file_id = data.get("file_id")
    
    # if file_id is None:
    #     await call.message.answer("Error: File ID is missing. Please try again.")
    #     return
    
    file_info = await bot.get_file(file_id)
    image_url = f"https://api.telegram.org/file/bot{bot.token}/{file_info.file_path}"
    
    effect = call.data
    if not effect:
        effect = "no_effect"
    if effect != "no_effect":
        effect = effect.split("_")[0]
    else:
        effect = None
        
    asyncio.create_task(
        update_user(data={
            "tg_user_id": str(call.message.chat.id),
            "effect": effect,
        })
    )

    tunes = await get_tunes(str(call.message.chat.id))
    if not tunes:
        builder = InlineKeyboardBuilder()
        builder.button(
            text=f"–î–æ–±–∞–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä",
            callback_data=f"start_upload_photo"
        )
        await call.message.answer("–£ –í–∞—Å –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ!", reply_markup=builder.as_markup())
        return

    user_db = await get_user(str(call.message.chat.id))

    if not user_db.get("tune_id"):
        user_db["tune_id"] = tunes[0].get("tune_id")
        user_db["gender"] = tunes[0].get("gender")
        asyncio.create_task(
            update_user(data={
                "tg_user_id": str(call.message.chat.id),
                "tune_id": user_db["tune_id"],
                "gender": user_db["gender"]
            })
        )
    asyncio.create_task(
        generate_photo_from_photo_helper(call=call, user_db=user_db, effect=effect, image_url=image_url)
    )
    
    await state.clear()

    
@gen_photo_router.callback_query(F.data.contains("_effect"))
async def handle_effect_handler(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.delete()
    user_db = await get_user(str(call.message.chat.id))
    if user_db.get("count_generations") == 0:
        builder = InlineKeyboardBuilder()
        builder.button(
            text=f"–ö—É–ø–∏—Ç—å",
            callback_data=f"prices_photo"
        )
        await call.message.answer("–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–πüò±", reply_markup=builder.as_markup())
        return
    effect = call.data
    if not effect:
        effect = "no_effect"
    if effect != "no_effect":
        effect = effect.split("_")[0]
    else:
        effect = None
    
    asyncio.create_task(
        update_user(data={
            "tg_user_id": str(call.message.chat.id),
            "effect": effect,
        })
    )

    tunes = await get_tunes(str(call.message.chat.id))
    if not tunes:
        builder = InlineKeyboardBuilder()
        builder.button(
            text=f"–î–æ–±–∞–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä",
            callback_data=f"start_upload_photo"
        )
        await call.message.answer("–£ –í–∞—Å –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ!", reply_markup=builder.as_markup())
        return

    user_db = await get_user(str(call.message.chat.id))
    if user_db.get("god_mod"):
        if user_db.get("god_mod_text"):
            god_mod_text = f"sks {user_db.get('gender')} {user_db.get('god_mod_text')}"
            await call.message.answer("–°–æ–∑–¥–∞–µ–º –≤–∞—à–µ —Ñ–æ—Ç–æ, –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ")
            asyncio.create_task(generate_photos_helper(
                call=call,
                effect=effect,
                tune_id=user_db.get('tune_id') if user_db.get("tune_id") else tunes[0].get("tune_id"),
                user_prompt=god_mod_text
            ))
            asyncio.create_task(
                update_user(data={
                    "tg_user_id": str(call.message.chat.id),
                    "god_mod_text": None,
                })
            )
            return
        else:
            builder = InlineKeyboardBuilder()
            builder.button(
                text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
                callback_data="inst_god_mod"
            )
            await call.message.answer("–†–µ–∂–∏–º –±–æ–≥–∞ –≤–∫–ª—é—á–µ–Ω!\n\n–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç", reply_markup=builder.as_markup())
            return
    if not user_db.get("tune_id"):
        user_db["tune_id"] = tunes[0].get("tune_id")
    asyncio.create_task(
        run_generation_photo(call, user_db, effect)
    )
    
   
@gen_photo_router.callback_query(F.data.contains("category_"))
async def handle_category_handler(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    asyncio.create_task(
        update_user(data={
            "tg_user_id": str(call.message.chat.id),
            "category": call.data,
        })
    )
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–ö–∏–Ω–æ—ç—Ñ—Ñ–µ–∫—Ç",
        callback_data="Cinematic_effect"
    )
    builder.button(
        text="–ù–µ–æ–Ω",
        callback_data="Neonpunk_effect"
    )
    builder.button(
        text="–ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π",
        callback_data="Photographic_effect"
    )
    builder.button(
        text="–ë–µ–∑ —ç—Ñ—Ñ–µ–∫—Ç–∞",
        callback_data="no_effect"
    )
    
    builder.adjust(1, 1, 1, 1)
    await call.message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç",
        reply_markup=builder.as_markup()
    )


def setup(dp):
    dp.include_router(gen_photo_router)

from pathlib import Path
from uuid import uuid4
import random
import os
import json

from aiogram_media_group import media_group_handler
from aiogram import types, Router, F
from aiogram.filters import CommandStart
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loguru import logger as log

from data.config import ROBOKASSA_MERCHANT_ID, ROBOKASSA_PASSWORD1
from core.utils.robo import generate_payment_link
from core.utils.chatgpt import translate_promt, translate_promt2
from data.messages import use_messages
from core.backend.api import (
    create_user_db, 
    create_img_path, 
    delete_user_images, 
    get_user_images,
    create_payment,
    get_user,
    get_tunes,
    get_price_list,
    create_tune,
    update_user,
    get_avatar_price_list,
    get_payment
)
from core.generation.photo import (
    learn_model_api, 
    wait_for_training, 
    generate_images, 
    wait_for_generation
)
from core.generation.utils import get_categories, get_random_prompt
from loader import bot


user_router = Router()

BASE_DIR = Path(__file__).resolve().parent.parent
BUTTON_TEXTS = {"–°—Ç–∏–ª–∏", "–†–µ–∂–∏–º –±–æ–≥–∞", "–í—ã–±–æ—Ä –∞–≤–∞—Ç–∞—Ä–∞", "–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏", "–î–æ–ø. –æ–ø—Ü–∏–∏", "–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"}


@user_router.message(CommandStart())
@use_messages
async def start_handler(message: types.Message, messages):
    user_db = await get_user(str(message.chat.id))
    if not user_db:
        user_db = await create_user_db(
            tg_user_id=message.from_user.id,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            username=message.from_user.username
        )
        
    log.debug(user_db)
        
    builder = InlineKeyboardBuilder()
    
    builder.add(
        types.InlineKeyboardButton(
            text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
            callback_data="inst"
        ),
        types.InlineKeyboardButton(
            text="–û–ø–ª–∞—Ç–∏—Ç—å",
            callback_data="first_payment"
        ),
    )
    
    keyboard = builder.as_markup()
    if user_db.get("count_generations") > 3:
        keyboard = get_main_keyboard()
    
    if not user_db.get("referal"):
        referal = message.text.split(" ")
        if len(referal) == 2:
            referal = referal[1]
            if referal != str(message.chat.id):
                await update_user(str(message.chat.id), referal=referal)
        else:
            referal = None
    
    await message.answer_photo(
        photo=types.FSInputFile(BASE_DIR / "media" / "logo_p.png"),
        caption="""<b>–ü—Ä–∏–≤–µ—Ç! –ù–∞ —Å–≤—è–∑–∏ –ü–∏–Ω–≥–≤–∏–Ω –±–æ—Ç - —É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ø—É–ª—è—Ä–Ω–æ–π –Ω–µ–π—Ä–æ–Ω–∫–∏</b> üêß

–†–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∫–∞–∫ –∑–¥–µ—Å—å –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç? –ê –µ—Å–ª–∏ —Ç—ã —É–∂–µ –≤ –∫—É—Ä—Å–µ, –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –≤–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É - –∏ –≤–ø–µ—Ä–µ–¥!
""",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    

@user_router.callback_query(F.data == "inst")
async def inst_callback(call: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="–í—Å–µ –ø–æ–Ω—è—Ç–Ω–æ!",
            callback_data="inst_next2"
        ),
    )
    await call.message.answer_photo(
        photo=types.FSInputFile(BASE_DIR / "media" / "90.png"),
        caption="""<b>–ü–∏–Ω–≥–≤–∏–Ω –ò–ò</b> - —ç—Ç–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å, –∫–æ—Ç–æ—Ä–∞—è —É—á–∏—Ç—Å—è –Ω–∞ —Ç–≤–æ–∏—Ö —Ñ–æ—Ç–æ –∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–µ üì∏ —Å —Ç–≤–æ–∏–º–∏ —á–µ—Ä—Ç–∞–º–∏ –ª–∏—Ü–∞ 

<b>–ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</b> üòç""",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    
    
@user_router.callback_query(F.data == "inst_next2")
async def inst_next2_callback(call: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="–î–∞–ª—å—à–µ!",
            callback_data="inst_next3"
        ),
    )
    await call.message.answer_photo(
        photo=types.FSInputFile(BASE_DIR / "media" / "2.png"),
        caption="–ü–æ–¥–æ–π–¥—É—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ª—é–±–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –Ω–æ —Å—Ç—É–¥–∏–π–Ω—ã–µ –º–æ–≥—É—Ç –¥–∞—Ç—å –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!",
        reply_markup=builder.as_markup()
    )
    

@user_router.callback_query(F.data == "inst_next3")
async def inst_next3_callback(call: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="–ê —Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?",
            callback_data="inst_next4"
        ),
    )
    await call.message.answer_photo(
        photo=types.FSInputFile(BASE_DIR / "media" / "87.jpg"),
        caption="""<b>–î–ª—è —Ç–µ–±—è –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–≤–∞ —Ä–µ–∂–∏–º–∞ –Ω–∞ –≤—ã–±–æ—Ä:</b>

1. –†–µ–∂–∏–º ¬´–°—Ç–∏–ª–∏¬ª, –≥–¥–µ —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å –∫–µ–º –±—ã—Ç—å: –æ—Ç —Ä–µ–±–µ–Ω–∫–∞ –¥–æ –∫–∏–Ω–æ–∑–≤–µ–∑–¥—ã! 
2. ¬´–†–µ–∂–∏–º –±–æ–≥–∞¬ª, –≥–¥–µ —Ç—ã —Å–∞–º —Ä–µ—à–∞–µ—à—å –∫–µ–º –±—ã—Ç—å! –¢–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—Å–∞—Ç—å —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤–∞—Ö)""",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    
    
@user_router.callback_query(F.data == "inst_next4")
async def inst_next4_callback(call: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="–ö—É–ø–∏—Ç—å!",
            callback_data="first_payment"
        ),
    )
    await call.message.answer_photo(
        photo=types.FSInputFile(BASE_DIR / "media" / "89.png"),
        caption="""<b>–¢—ã –≥–æ—Ç–æ–≤(–∞) —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–∏ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏? –¢–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç–æ –≤–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –∏ –Ω–∞—á–Ω—ë–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —à–µ–¥–µ–≤—Ä–æ–≤!</b>

–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç–µ–±–µ –ø–æ–≤–µ–∑–ª–æ, —Å–µ–π—á–∞—Å –º—ã —Å–Ω–∏–∑–∏–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ 72%: 1 290‚ÇΩ –≤–º–µ—Å—Ç–æ <s>4 490‚ÇΩ</s>

–û–ø–ª–∞—Ç–∏ —Å–µ–π—á–∞—Å –∫–∞—Ä—Ç–æ–π –†–§, –ª–∏–±–æ –∑–∞—Ä—É–±–µ–∂–Ω–æ–π –∫–∞—Ä—Ç–æ–π –∏ –ø–æ–ª—É—á–∏:
‚úîÔ∏è 90 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π 
‚úîÔ∏è –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–±–ª–æ–Ω–æ–≤
‚úîÔ∏è 1 –º–æ–¥–µ–ª—å
‚úîÔ∏è –†–µ–∂–∏–º –±–æ–≥–∞ 

üéÅ <b>–ï—Å–ª–∏ —É—Å–ø–µ–µ—à—å –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞ 30 –º–∏–Ω—É—Ç, –ø–æ–ª—É—á–∏—à—å –µ—â—ë 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ –ø–æ–¥–∞—Ä–æ–∫</b>""",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    

@user_router.message(F.media_group_id)
@media_group_handler
async def handle_albums(messages: list[types.Message]):
    user_db = await get_user(messages[-1].chat.id)
    if not user_db.get("is_learn_model"):
        avatar_price_list = await get_avatar_price_list()
        builder = InlineKeyboardBuilder()
        builder.button(
            text=f"{avatar_price_list.get('count')} –º–æ–¥–µ–ª—å",
            callback_data=f"inst_payment_{avatar_price_list.get('price')}_0_{avatar_price_list.get('learn_model')}"
        )
        # await state.update_data(learn_model=True)
        await messages[-1].answer("–û–ø–ª–∞—Ç–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞", reply_markup=builder.as_markup())
        return
    log.debug(user_db)
    gender = user_db.get("gender")
    if not gender:
        await messages[-1].answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª", reply_markup=get_main_keyboard())
        return
    
    photos_path = BASE_DIR / "media" / "photos"
    
    if not os.path.exists(photos_path):
        os.makedirs(photos_path)
    
    if len(messages) != 10:
        await messages[-1].answer("–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ 10 —Ñ–æ—Ç–æ")
        return
    
    await update_user(tg_user_id=str(messages[0].chat.id), is_learn_model=False, gender=gender)
    
    await messages[-1].answer(
        """–ú—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–≤–æ–∏ —Ñ–æ—Ç–æ –∏ –∑–∞–ø—É—Å—Ç–∏–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —Ç–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞, —ç—Ç–æ –∑–∞–π–º—ë—Ç –æ–∫–æ–ª–æ 5-10 –º–∏–Ω—É—Ç ‚Ä¶ üîÑ

–ê —Ç—ã –ø–æ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª https://t.me/photopingvin_ai

–¢–∞–º –º—ã –ø—É–±–ª–∏–∫—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–¥–µ–∏ —Å—Ç–∏–ª–µ–π –∏ –ø—Ä–æ–º—Ç–æ–≤ –¥–ª—è —Ç–≤–æ–∏—Ö –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –∞ —Ç–∞–∫–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏.
""")
    images = []
    for m in messages:
        if m.photo:
            photo = await bot.get_file(m.photo[-1].file_id)
            file_path = photo.file_path
            output_filename = f"{photos_path}/{uuid4()}_{file_path.replace('photos/', '')}"
            await m.bot.download_file(
                file_path, destination=output_filename
            )
            images.append(output_filename)
            response = await create_img_path(
                tg_user_id=str(m.chat.id),
                path=output_filename
            )
        if m.document:
            photo = await m.bot.get_file(m.document.file_id)
            file_path = photo.file_path
            output_filename = f"{photos_path}/{uuid4()}_{file_path.replace('documents/', '')}"
            images.append(output_filename)
            await m.bot.download_file(
                file_path, destination=output_filename
            )
            response = await create_img_path(
                tg_user_id=str(m.chat.id),
                path=output_filename
            )
    
    images = await get_user_images(str(messages[-1].chat.id))
    imgs = []
    for i in images:
        i = i.get("path")
        imgs.append(i)
    
    response = await learn_model_api(imgs, gender)
    tune_id = response.get("id")
    if not tune_id:
        builder = InlineKeyboardBuilder()
        builder.button(
            text="–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
            callback_data="support"
        )
        await messages[-1].answer(
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É", 
            reply_markup=builder.as_markup(),
        )
        return
    training_complete = await wait_for_training(tune_id)
    if training_complete:
        response_tune = await create_tune(tune_id=str(tune_id), tg_user_id=str(messages[-1].chat.id), gender=gender)
        log.debug(response_tune)
        await update_user(tg_user_id=str(messages[0].chat.id), is_learn_model=False, tune_id=str(tune_id), gender=None)
        await messages[-1].answer(
            """–¢–≤–æ–π –∞–≤–∞—Ç–∞—Ä —Å–æ–∑–¥–∞–Ω ‚òëÔ∏è
–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º! –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∏–ª–∏" –∏–ª–∏ "–†–µ–∂–∏–º –±–æ–≥–∞" –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞.
""", reply_markup=get_main_keyboard()
        )
        for i in imgs:
            try:
                os.remove(i)
            except Exception as err:
                log.error(err)
                continue


@user_router.message(F.text == "–í—ã–±–æ—Ä –∞–≤–∞—Ç–∞—Ä–∞")
async def avatar_callback(message: types.Message):
    tunes = await get_tunes(str(message.chat.id))
    log.debug(tunes)
    builder = InlineKeyboardBuilder()
    for i, tune in enumerate(tunes, 1):
        builder.button(
            text=f"–ú–æ–¥–µ–ª—å {i}",
            callback_data=f"tune_{tune.get('tune_id')}_{i}"
        )
    builder.adjust(1, 1, 1, 1)
    builder.button(
        text=f"–î–æ–±–∞–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä",
        callback_data=f"start_upload_photo"
    )
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
        reply_markup=builder.as_markup()
    )
    
    
@user_router.callback_query(F.data.contains("tune_"))
async def select_avatar_callback(call: types.CallbackQuery):
    tune_id = call.data.split("_")[1]
    tune_num = call.data.split("_")[-1]
    await update_user(tg_user_id=str(call.message.chat.id), tune_id=str(tune_id))
    keyboard = get_main_keyboard()
    await call.message.answer(
        text=f"–°–º–µ–Ω–∞ –º–æ–¥–µ–ª–∏ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ¬´–ú–æ–¥–µ–ª—å ‚Ññ{tune_num}¬ª ‚úÖ",
        reply_markup=keyboard
    )
    

@user_router.message(F.text == "–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏")
async def generations_stat_callback(message: types.Message):
    user_db = await get_user(message.chat.id)
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üí≥ –î–æ–∫—É–ø–∏—Ç—å —Ñ–æ—Ç–æ",
        callback_data="prices_photo"
    )
    await message.answer(
        text="""
<b>–°–ø–∞—Å–∏–±–æ —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏, —Ç—ã —Ç–∞–∫–æ–π —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–π! –ê —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–º –ª—é–¥—è–º –Ω–∞–¥–æ –¥–µ—Ä–∂–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ</b> üññü§ù‚ù§Ô∏è

–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π —Ñ–æ—Ç–æ: <b>{count_gen}</b>
""".format(count_gen=user_db.get("count_generations")),
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    
    
@user_router.callback_query(F.data == "prices_photo")
async def prices_photo_callback(call: types.CallbackQuery):
    price_list = await get_price_list()
    builder = InlineKeyboardBuilder()
    price_str = ""
    user_db = await get_user(str(call.message.chat.id))
    for i in price_list:
        log.debug(i)
        if i.get("learn_model"):
            continue
        sale = i.get("sale", None)
        builder.button(
            text=f"{i.get('count')} —Ñ–æ—Ç–æ",
            callback_data=f"inst_payment_{i.get('price')}_{i.get('count')}_{user_db.get('is_learn_model')}"
        )
        if not sale or sale == "":
            price_str += f"* {i.get('count')} —Ñ–æ—Ç–æ: {i.get('price')}‚ÇΩ\n"
        else:
            price_str += f"* {i.get('count')} —Ñ–æ—Ç–æ: {i.get('price')}‚ÇΩ ({sale})\n"
    builder.adjust(2, 2, 2)
    await call.message.answer(
        text="""
–†–∞–¥—ã, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å! 
–•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π? üì∏
–í–∞—Ä–∏–∞–Ω—Ç—ã:
{price_str}
–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç!

""".format(price_str=price_str),
        reply_markup=builder.as_markup()
    )
    
    
@user_router.callback_query(F.data.in_(["man", "woman"]))
async def gender_selection(call: types.CallbackQuery):
    log.debug(call.data)
    await update_user(str(call.message.chat.id), gender=call.data)
    await call.message.answer_photo(
        photo=types.FSInputFile(BASE_DIR / "media" / "inst.png"),
        caption="""
        <b>–ò–ù–°–¢–†–£–ö–¶–ò–Ø...</b>

<b>–ó–∞–≥—Ä—É–∑–∏ 10 —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –æ–±—É—á–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</b> üì≤

<b>–í–∞–∂–Ω–æ:</b>
    ‚Äì –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ —Å—Ç—Ä–æ–≥–æ 10 —Ñ–æ—Ç–æ. –ù–µ 5, –Ω–µ 8 –∏ –Ω–µ 16.
    ‚Äì –ò—Å–ø–æ–ª—å–∑—É–π –∫—Ä—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã —Å–≤–æ–µ–≥–æ –ª–∏—Ü–∞ –∏–ª–∏ —Å–µ–ª—Ñ–∏, –∏–∑–±–µ–≥–∞–π —Å–Ω–∏–º–∫–æ–≤ —Å –¥–∞–ª—å–Ω–µ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è.
    ‚Äì –ù–∞ —Ñ–æ—Ç–æ –¥–æ–ª–∂–µ–Ω(–Ω–∞) –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ç—ã ‚Äî –±–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª–µ–π, –±–∞–±—É—à–µ–∫ –∏ –¥–æ–º–∞—à–Ω–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö.
    ‚Äì –ù–µ –≤—ã–±–∏—Ä–∞–π—Ç–µ —Ñ–æ—Ç–æ —Å —Ä–µ–∑–∫–∏–º–∏ —ç–º–æ—Ü–∏—è–º–∏, –º–∞–∫—Å–∏–º—É–º –ª–µ–≥–∫–∞—è —É–ª—ã–±–∫–∞.
    ‚Äì –ó–∞–≥—Ä—É–∂–∞–π —Ñ–æ—Ç–æ –≤ –ø—Ä—è–º–æ–π –ø–æ–∑–µ, –±–µ–∑ –Ω–∞–∫–ª–æ–Ω–æ–≤ –≥–æ–ª–æ–≤—ã –∏–ª–∏ —à–µ–∏.
    ‚Äì –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.

<b>–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –∏ –æ–±—É—á–∏—Ç—å –±–æ—Ç–∞ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑! –ü–æ–¥—Ö–æ–¥–∏—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ç–æ –∏ —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏!</b>

–ï—Å–ª–∏ iPhone –ø—Ä–µ–¥–ª–æ–∂–∏—Ç ¬´–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ JPEG¬ª, —Å–æ–≥–ª–∞—à–∞–π—Å—è üëç

–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –±–æ—Ç–∞ ‚¨áÔ∏è

        """, parse_mode="HTML")
    
    
@user_router.callback_query(F.data == "start_upload_photo")
async def start_upload_photo_callback(call: types.CallbackQuery):
    user_db = await get_user(str(call.message.chat.id))
    if not user_db.get("is_learn_model"):
        avatar_price_list = await get_avatar_price_list()
        builder = InlineKeyboardBuilder()
        builder.button(
            text=f"{avatar_price_list.get('count')} –º–æ–¥–µ–ª—å",
            callback_data=f"inst_payment_{avatar_price_list.get('price')}_0_{avatar_price_list.get('learn_model')}"
        )
        await call.message.answer("–û–ø–ª–∞—Ç–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞", reply_markup=builder.as_markup())
        return
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–ú—É–∂—á–∏–Ω–∞",
        callback_data="man"
    )
    builder.button(
        text="–ñ–µ–Ω—â–∏–Ω–∞",
        callback_data="woman"
    )
    await call.message.answer(
        text="""–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å ‚ù§Ô∏è
<b>–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø–æ–ª:</b>""",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
        
        
@user_router.message(F.text == "–†–µ–∂–∏–º –±–æ–≥–∞")
async def god_mod_callback(message: types.Message):
    tunes = await get_tunes(str(message.chat.id))
    if not tunes:
        builder = InlineKeyboardBuilder()
        builder.button(
            text=f"–î–æ–±–∞–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä",
            callback_data=f"start_upload_photo"
        )
        await message.answer("–£ –í–∞—Å –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ!", reply_markup=builder.as_markup())
        return
    user_db = await get_user(str(message.chat.id))
    god_mod = user_db.get("god_mod", False)
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
        callback_data="inst_god_mod"
    )
    if god_mod:
        builder.button(
            text="–í—ã–∫–ª. —Ä–µ–∂–∏–º –±–æ–≥–∞",
            callback_data="off_god_mod"
        )
    else:
        builder.button(
            text="–í–∫–ª. —Ä–µ–∂–∏–º –±–æ–≥–∞",
            callback_data="on_god_mod"
        )
    await message.answer(
        text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–º –±–æ–≥–∞ üí´",
        reply_markup=builder.as_markup()
    )
    
    
@user_router.callback_query(F.data == "on_god_mod")
async def on_god_mod_callback(call: types.CallbackQuery):
    await update_user(str(call.message.chat.id), god_mod=True)
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
        callback_data="inst_god_mod"
    )
    builder.button(
        text="–ù–∞ –≥–ª–∞–≤–Ω—É—é",
        callback_data="home"
    )
    await call.message.answer(
        text="""–†–µ–∂–∏–º –±–æ–≥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–∞–∫–æ–µ —Ñ–æ—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å, –∏ –æ–Ω —Å–æ–∑–¥–∞—Å—Ç –¥–ª—è —Ç–µ–±—è –∂–µ–ª–∞–Ω–Ω—ã–π –æ–±—Ä–∞–∑.
*–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∏–¥–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ‚¨áÔ∏è
""",
        reply_markup=builder.as_markup()
    )
    
    
@user_router.callback_query(F.data == "off_god_mod")
async def off_god_mod_callback(call: types.CallbackQuery):
    await update_user(str(call.message.chat.id), god_mod=False)
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–ù–∞ –≥–ª–∞–≤–Ω—É—é",
        callback_data="home"
    )
    await call.message.answer(
        text="–†–µ–∂–∏–º –±–æ–≥–∞ –≤—ã–∫–ª—é—á–µ–Ω!",
        reply_markup=builder.as_markup()
    )
    
    
@user_router.message(~F.text.in_(BUTTON_TEXTS))
async def set_text_in_godmod_callback(message: types.Message):
    if message.text in BUTTON_TEXTS:
        return
    
    user_db = await get_user(str(message.chat.id))
    log.debug(user_db)
    if user_db.get("count_generations") < 3:
        builder = InlineKeyboardBuilder()
        builder.add(
            types.InlineKeyboardButton(
                text="–ö—É–ø–∏—Ç—å!",
                callback_data="prices_photo"
            ),
        )
        await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", reply_markup=builder.as_markup())
        return
    if not user_db.get("god_mod"):
        builder = InlineKeyboardBuilder()
        builder.button(
            text="–í–∫–ª. —Ä–µ–∂–∏–º –±–æ–≥–∞",
            callback_data="on_god_mod"
        )
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–∫–ª—é—á–∏—Ç–µ —Ä–µ–∂–∏–º –±–æ–≥–∞", reply_markup=builder.as_markup())
        return
    promt = message.text
    for _ in range(5):
        try:
            promt = translate_promt2(promt)
            if promt:
                break
        except Exception as err:
            log.debug(err)
            continue
    await update_user(str(message.chat.id), god_mod_text=promt)
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–ö–∏–Ω–æ—ç—Ñ—Ñ–µ–∫—Ç",
        callback_data="Cinematic_effect"
    )
    builder.button(
        text="–ù–µ–æ–Ω",
        callback_data="Neonpunk_effect"
    )
    builder.button(
        text="–ë–µ–∑ —ç—Ñ—Ñ–µ–∫—Ç–∞",
        callback_data="no_effect"
    )
    await message.answer(
        text="–í–∞—à –ø—Ä–æ–º—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
        reply_markup=builder.as_markup()
    )
    
    
@user_router.callback_query(F.data == "inst_god_mod")
async def inst_god_mod_callback(call: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–ù–∞–∑–∞–¥",
        callback_data="god_mod"
    )
    await call.message.answer(
        text="""üìù <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–∞—à–µ–≥–æ —Ñ–æ—Ç–æ?</b>
1Ô∏è‚É£ –£–∫–∞–∂–∏ –∫–∞–∫–æ–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ: –ø–æ—Ä—Ç—Ä–µ—Ç, –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç –∏ —Ç.–¥.

2Ô∏è‚É£ –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å: —Å–ø–æ—Ä—Ç—Å–º–µ–Ω, —Ä–æ–∫-–º—É–∑—ã–∫–∞–Ω—Ç, —Ñ—É—Ç–±–æ–ª–∏—Å—Ç –∏–ª–∏ –∫–æ—Ä–æ–ª–µ–≤–∞.

3Ô∏è‚É£ –ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Å—Ç–∏–ª—å: –æ–¥–µ–∂–¥—É, –ø—Ä–∏—á–µ—Å–∫—É, –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã, —á–µ—Ä—Ç—ã –ª–∏—Ü–∞, —Ñ–∏–≥—É—Ä—É

4Ô∏è‚É£ –¢—â–∞—Ç–µ–ª—å–Ω–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å, –æ–ø–∏—Å–∞–≤ —Ñ–æ–Ω –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–∑–∞–¥–∏ —Ç–µ–±—è, –∫–∞–∫ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –≤—ã–≥–ª—è–¥–µ—Ç—å, –∫–∞–∫–∞—è –ø–æ–∑–∞ —É —Ç–µ–±—è, –∫–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —Ñ–æ—Ç–æ.

5Ô∏è‚É£ –ò–∑–±–µ–≥–∞–π—Ç–µ –¥–ª–∏–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ö–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∏ –∫—Ä–∞—Ç–∫–æ, —Ä–∞–∑–¥–µ–ª—è—è –∑–∞–ø—è—Ç—ã–º–∏.

<b>–î–µ–π—Å—Ç–≤—É–π –ø–æ —ç—Ç–∏–º –ø—Ä–∞–≤–∏–ª–∞–º –∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å–≤–æ–µ –∏–¥–µ–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –≤—Å–µ–≥–æ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥!</b> ‚úÖ
""", reply_markup=builder.as_markup(), parse_mode="HTML")
    
    
@user_router.message(F.text == "–°—Ç–∏–ª–∏")
async def styles_effect_handler(message: types.Message):
    user_db = await get_user(str(message.chat.id))
    if user_db.get("god_mod"):
        await message.answer(text="–†–µ–∂–∏–º –±–æ–≥–∞ –≤—ã–∫–ª—é—á–µ–Ω", reply_markup=get_main_keyboard())
        await update_user(str(message.chat.id), god_mod=False, god_mod_text=None)
    
    if user_db.get("count_generations") < 3:
        builder = InlineKeyboardBuilder()
        builder.button(
            text="–ö—É–ø–∏—Ç—å",
            callback_data="prices_photo"
        )
        await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", reply_markup=builder.as_markup()) 
        return
    
    json_file = BASE_DIR / "media" / "promts.json"
    tunes = await get_tunes(str(message.chat.id))
    if not tunes or not user_db.get("gender"):
        builder = InlineKeyboardBuilder()
        builder.button(
            text=f"–î–æ–±–∞–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä",
            callback_data=f"start_upload_photo"
        )
        await message.answer("–£ –í–∞—Å –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ!", reply_markup=builder.as_markup())
        return

    categories = get_categories(gender=user_db.get("gender"), json_file=json_file)
    builder = InlineKeyboardBuilder()
    for c in categories:
        builder.button(
            text=c.get("name"),
            callback_data=c.get("slug")
        )
    builder.adjust(2, 2, 2, 2, 2, repeat=True)
    builder.button(
        text="–ù–∞ –≥–ª–∞–≤–Ω—É—é",
        callback_data="home"
    )
    # builder.adjust(2, 2, 3, repeat=True)
    await message.answer(text="""–í—ã–±–µ—Ä–∏ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è —Å—Ç–∏–ª—å –∏ —Ñ–∏–ª—å—Ç—Ä, –ø–æ–ª—É—á–∏—Ç–µ 3 —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥.

–í –∫–∞–∂–¥–æ–º —Å—Ç–∏–ª–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–±–∏—Ä–∞—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º.
""", reply_markup=builder.as_markup())
    

@user_router.callback_query(F.data.contains("first_payment"))
async def first_payment_callback(call: types.CallbackQuery):
    user_db = await get_user(str(call.message.chat.id))
    amount = 1290
    —Åount_generations = 100
    learn_model = user_db.get("is_learn_model", True)

    while True:
        payment_id = random.randint(10, 214748347)
        pay_db = await get_payment(str(payment_id))
        if pay_db:
            continue
        break
    await create_payment(
        tg_user_id=str(call.message.chat.id),
        amount=str(amount),
        payment_id=str(payment_id),
        —Åount_generations=—Åount_generations,
        learn_model=learn_model,
        is_first_payment=True
    )
    file_path = BASE_DIR / "media" / "payload.json"
    with open(file_path, 'r', encoding='utf-8') as file:
        data = json.load(file)
    index = 0
    description = ""
    for i, v in enumerate(data):
        if v.get("Cost") == amount:
            index = i
            description = v.get("Name")
            break
    payment_link = generate_payment_link(
        ROBOKASSA_MERCHANT_ID,
        ROBOKASSA_PASSWORD1,
        amount,
        int(payment_id),
        description,
        items=[data[index]],
    )
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–ö–∞—Ä—Ç–∞ –†–§",
        url=payment_link
    )
    builder.button(
        text="–ó–∞—Ä—É–±–µ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞",
        url=payment_link
    )
    builder.button(
        text="–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
        callback_data="support"
    )
    builder.adjust(1,1,1)
    await call.message.answer(
        text="""–¢–µ–ø–µ—Ä—å —Å–∞–º–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ! –ú–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –∫–∞–∫ —Å –∫–∞—Ä—Ç—ã –†–§, —Ç–∞–∫ –∏ —Å –∑–∞—Ä—É–±–µ–∂–Ω–æ–π.""",
        # text="–¢–µ–ø–µ—Ä—å —Å–∞–º–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ! –ú–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å —Å –∫–∞—Ä—Ç—ã –†–§",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

 
@user_router.callback_query(F.data.contains("inst_payment"))
async def inst_payment_callback(call: types.CallbackQuery):
    data = call.data.split("_")
    amount = int(data[2])
    —Åount_generations = int(data[3])
    learn_model = data[4]
    # user_db = await get_user(str(call.message.chat.id))
    # learn_model = user_db.get("is_learn_model")

    while True:
        payment_id = random.randint(10, 214748347)
        pay_db = await get_payment(str(payment_id))
        if pay_db:
            continue
        break
    await create_payment(
        tg_user_id=str(call.message.chat.id),
        amount=str(amount),
        payment_id=str(payment_id),
        —Åount_generations=—Åount_generations,
        learn_model=learn_model,
        is_first_payment=False,
    )
    file_path = BASE_DIR / "media" / "payload.json"
    with open(file_path, 'r', encoding='utf-8') as file:
        data = json.load(file)
    index = 0
    description = ""
    for i, v in enumerate(data):
        if v.get("Cost") == amount:
            index = i
            description = v.get("Name")
            # if learn_model and description != "–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏":
            #     continue
            break
    payment_link = generate_payment_link(
        ROBOKASSA_MERCHANT_ID,
        ROBOKASSA_PASSWORD1,
        amount,
        int(payment_id),
        description,
        items=[data[index]],
    )
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–ö–∞—Ä—Ç–∞ –†–§",
        url=payment_link
    )
    builder.button(
        text="–ó–∞—Ä—É–±–µ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞",
        url=payment_link
    )
    builder.button(
        text="–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
        callback_data="support"
    )
    builder.adjust(1,1,1)
    await call.message.answer(
        text="""–¢–µ–ø–µ—Ä—å —Å–∞–º–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ! –ú–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –∫–∞–∫ —Å –∫–∞—Ä—Ç—ã –†–§, —Ç–∞–∫ –∏ —Å –∑–∞—Ä—É–±–µ–∂–Ω–æ–π.""",
        # text="–¢–µ–ø–µ—Ä—å —Å–∞–º–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ! –ú–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å —Å –∫–∞—Ä—Ç—ã –†–§",
        reply_markup=builder.as_markup()
    )


@user_router.callback_query(F.data == "home")
async def home_callback(call: types.CallbackQuery):
    user_db = await get_user(str(call.message.chat.id))
    if not user_db:
        user_db = await create_user_db(
            tg_user_id=call.message.from_user.id,
            first_name=call.message.from_user.first_name,
            last_name=call.message.from_user.last_name,
            username=call.message.from_user.username
        )
        
    log.debug(user_db)
        
    builder = InlineKeyboardBuilder()
    
    builder.add(
        types.InlineKeyboardButton(
            text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
            callback_data="inst"
        ),
        types.InlineKeyboardButton(
            text="–û–ø–ª–∞—Ç–∏—Ç—å",
            callback_data="first_payment"
        ),
    )
    
    keyboard = builder.as_markup()
    if user_db.get("count_generations") > 3:
        keyboard = get_main_keyboard()
    
    await call.message.answer_photo(
        photo=types.FSInputFile(BASE_DIR / "media" / "logo_p.png"),
        caption="""<b>–ü—Ä–∏–≤–µ—Ç! –ù–∞ —Å–≤—è–∑–∏ –ü–∏–Ω–≥–≤–∏–Ω –±–æ—Ç - —É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ø—É–ª—è—Ä–Ω–æ–π –Ω–µ–π—Ä–æ–Ω–∫–∏</b> üêß

–†–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∫–∞–∫ –∑–¥–µ—Å—å –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç? –ê –µ—Å–ª–∏ —Ç—ã —É–∂–µ –≤ –∫—É—Ä—Å–µ, –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –≤–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É - –∏ –≤–ø–µ—Ä–µ–¥!
""",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

    
@user_router.callback_query(F.data.contains("_effect"))
async def handle_effect_handler(call: types.CallbackQuery):
    user_db = await get_user(str(call.message.chat.id))
    effect = call.data
    if not effect:
        effect = "no_effect"
    if effect != "no_effect":
        effect = effect.split("_")[0]
    else:
        effect = None
        
    await update_user(str(call.message.chat.id), effect=effect)

    tunes = await get_tunes(str(call.message.chat.id))
    if not tunes:
        builder = InlineKeyboardBuilder()
        builder.button(
            text=f"–î–æ–±–∞–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä",
            callback_data=f"start_upload_photo"
        )
        await call.message.answer("–£ –í–∞—Å –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ!", reply_markup=builder.as_markup())
        return

    user_db = await get_user(str(call.message.chat.id))
    if user_db.get("god_mod"):
        if user_db.get("god_mod_text"):
            god_mod_text = f"sks {user_db.get('gender')} {user_db.get('god_mod_text')}"
            
            await generate_photos_helper(
                call=call,
                effect=effect,
                tune_id=user_db.get('tune_id'),
                user_prompt=god_mod_text
            )
            await update_user(str(call.message.chat.id), god_mod_text=None)
            return
        else:
            builder = InlineKeyboardBuilder()
            builder.button(
                text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
                callback_data="inst_god_mod"
            )
            await call.message.answer("–†–µ–∂–∏–º –±–æ–≥–∞ –≤–∫–ª—é—á–µ–Ω!\n\n–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç", reply_markup=builder.as_markup())
            return
    json_file = BASE_DIR / "media" / "promts.json"
    user_prompt = get_random_prompt(json_file=json_file, gender=user_db.get("gender"), category_slug=user_db.get("category"))
    await generate_photos_helper(
        tune_id=user_db.get('tune_id'),
        user_prompt=user_prompt,
        effect=effect,
        call=call
    )
    
   
@user_router.callback_query(F.data.contains("category_"))
async def handle_category_handler(call: types.CallbackQuery):
    await update_user(str(call.message.chat.id), category=call.data)
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–ö–∏–Ω–æ—ç—Ñ—Ñ–µ–∫—Ç",
        callback_data="Cinematic_effect"
    )
    builder.button(
        text="–ù–µ–æ–Ω",
        callback_data="Neonpunk_effect"
    )
    builder.button(
        text="–ë–µ–∑ —ç—Ñ—Ñ–µ–∫—Ç–∞",
        callback_data="no_effect"
    )
    await call.message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç",
        reply_markup=builder.as_markup()
    )
    

async def generate_photos_helper(call: types.CallbackQuery, tune_id: str, user_prompt: str, effect: str):
    user_db = await get_user(str(call.message.chat.id))
    new_count_gen = user_db.get("count_generations") - 3
    await update_user(str(call.message.chat.id), count_generations=new_count_gen)
    
    gen_response = await generate_images(
        tune_id=int(tune_id), 
        promt=user_prompt,
        effect=effect
    )
    if not gen_response or "id" not in gen_response:
        log.error(gen_response)
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.", reply_markup=get_main_keyboard())
        new_count_gen = user_db.get("count_generations") + 3
        await update_user(str(call.message.chat.id), count_generations=new_count_gen)
        return

    user_db = await get_user(str(call.message.chat.id))
    prompt_id = gen_response.get("id")
    await call.message.answer("–°–æ–∑–¥–∞–µ–º –≤–∞—à–µ —Ñ–æ—Ç–æ, –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ")
    if user_db.get("count_generations") < 3:
        await call.message.answer("""
<b>–£ –í–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {count_gen} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π!</b>

–ü–æ–ª—É—á–∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –º–∏—Ä—É –ò–ò-—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!  üéÅ  

<b>–ú—ã –¥–∞—Ä–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ!</b>

üéÅ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å 10 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:

1. –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à Instagram: https://www.instagram.com/photopingvin.ai
2. –ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –≤–æ–ª—à–µ–±–Ω—ã–º –ò–ò-—Ñ–æ—Ç–æ –≤ Stories.
3. –û—Ç–º–µ—Ç—å –Ω–∞—Å @photopingvin.ai –∏ –¥–æ–±–∞–≤—å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞: https://t.me/photopingvin_bot?start={user_tg_id}

üéÅ <b>–•–æ—á–µ—à—å 30 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π?</b>

1. –°–æ–∑–¥–∞–π —Å–æ–≤–º–µ—Å—Ç–Ω—ã–π –ø–æ—Å—Ç (—Ñ—É–Ω–∫—Ü–∏—è –°–æ–∞–≤—Ç–æ—Ä—Å—Ç–≤–æ) —Å –Ω–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º @photopingvin.ai
2. –ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–º–∏ –ò–ò-—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è—Ö!

<b>–û—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–≤–æ–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @managerpingvin_ai ‚Äì –∏ –º—ã –Ω–∞—á–∏—Å–ª–∏–º –±–æ–Ω—É—Å–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç!  –ñ–¥—ë–º —Ç–≤–æ–∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã!</b>

*Instagram –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Meta, –ø—Ä–∏–∑–Ω–∞–Ω–Ω–æ–π —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–π –≤ –†–§""".format(
    count_gen=user_db.get("count_generations"), user_tg_id=str(call.message.chat.id)), parse_mode="HTML",
)

    image_urls = await wait_for_generation(prompt_id)
    media_group = MediaGroupBuilder(caption='<a href="https://t.me/photopingvin_bot?start">üñº –°–æ–∑–¥–∞–Ω–æ –≤ –ü–∏–Ω–≥–≤–∏–Ω –ò–ò</a>')
    
    if image_urls:
        for i in image_urls:
            media_group.add(type="photo", media=i, parse_mode="HTML")
    else:
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    
    await bot.send_media_group(chat_id=call.message.chat.id, media=media_group.build())
    await delete_user_images(str(call.message.chat.id))


@user_router.message(F.text == "–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
async def callcenter_callback(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–ù–∞ –≥–ª–∞–≤–Ω—É—é",
        callback_data="home"
    )
    await message.answer(
        """<b>–ù–∞—à–∞ —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–º –¢–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç–µ:</b> @managerpingvin_ai

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ —É –≤–∞—Å –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã - —Ç–∞–∫ –º—ã —Å–º–æ–∂–µ–º –ø–æ–º–æ—á—å —Ç–µ–±–µ –±—ã—Å—Ç—Ä–µ–µ. –ù–µ –∑–∞–±—É–¥—å —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π Chat ID: <code>{chat_id}</code>""".format(chat_id=message.chat.id),
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )


@user_router.callback_query(F.data == "support")
async def support_handler(call: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–ù–∞ –≥–ª–∞–≤–Ω—É—é",
        callback_data="home"
    )
    await call.message.answer(
    """<b>–ù–∞—à–∞ —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–º –¢–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç–µ:</b> @managerpingvin_ai

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ —É –≤–∞—Å –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã - —Ç–∞–∫ –º—ã —Å–º–æ–∂–µ–º –ø–æ–º–æ—á—å —Ç–µ–±–µ –±—ã—Å—Ç—Ä–µ–µ. –ù–µ –∑–∞–±—É–¥—å —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π Chat ID: <code>{chat_id}</code>""".format(chat_id=call.message.chat.id),
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )


@user_router.callback_query(F.data == "driving")
async def driving_callback(call: types.CallbackQuery):
    await call.message.answer_photo(
        photo=types.FSInputFile(BASE_DIR / "media" / "87.jpg"),
        caption="""<b>–î–ª—è —Ç–µ–±—è –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–≤–∞ —Ä–µ–∂–∏–º–∞ –Ω–∞ –≤—ã–±–æ—Ä:</b>

1. –†–µ–∂–∏–º ¬´–°—Ç–∏–ª–∏¬ª, –≥–¥–µ —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å –∫–µ–º –±—ã—Ç—å: –æ—Ç —Ä–µ–±–µ–Ω–∫–∞ –¥–æ –∫–∏–Ω–æ–∑–≤–µ–∑–¥—ã! 
2. ¬´–†–µ–∂–∏–º –±–æ–≥–∞¬ª, –≥–¥–µ —Ç—ã —Å–∞–º —Ä–µ—à–∞–µ—à—å –∫–µ–º –±—ã—Ç—å! –¢–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—Å–∞—Ç—å —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤–∞—Ö)""",
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

     
def get_main_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–°—Ç–∏–ª–∏"), types.KeyboardButton(text="–†–µ–∂–∏–º –±–æ–≥–∞")],
            [types.KeyboardButton(text="–í—ã–±–æ—Ä –∞–≤–∞—Ç–∞—Ä–∞"), types.KeyboardButton(text="–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏")],
            # [types.KeyboardButton(text="–î–æ–ø. –æ–ø—Ü–∏–∏"), types.KeyboardButton(text="–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")],
            [types.KeyboardButton(text="–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")],
        ],
        resize_keyboard=True
    )
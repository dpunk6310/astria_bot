from pathlib import Path
from uuid import uuid4
import random
import os

from aiogram_media_group import media_group_handler
from aiogram import types, Router, F
from aiogram.filters import CommandStart
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loguru import logger as log

from data.config import ROBOKASSA_MERCHANT_ID, ROBOKASSA_TEST_PASSWORD1
from core.utils.robokassa import generate_payment_link
from data.messages import use_messages
from core.backend.api import (
    create_user_db, 
    create_img_path, 
    delete_user_images, 
    get_user_images,
    create_payment,
    get_user,
    get_tunes,
    get_tune,
    create_tune,
    update_user
)
from core.generation.photo import (
    learn_model_api, 
    wait_for_training, 
    generate_images, 
    wait_for_generation
)
from core.generation.utils import get_categories, get_random_prompt
from loader import bot


user_router = Router()


class UploadPhotoState(StatesGroup):
    gender = State()
    effect = State()
    tune_id = State()


@user_router.message(CommandStart())
@use_messages
async def start_handler(message: types.Message, messages):
    await create_user_db(
        tg_user_id=message.from_user.id,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        username=message.from_user.username
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
            callback_data="inst"
        ),
        types.InlineKeyboardButton(
            text="–û–ø–ª–∞—Ç–∏—Ç—å",
            callback_data="inst_payment"
        ),
    )
    await message.answer(messages["start"], reply_markup=builder.as_markup())
    

@user_router.message(F.media_group_id)
@media_group_handler
async def handle_albums(messages: list[types.Message], state: FSMContext):
    BASE_DIR = Path(__file__).resolve().parent.parent
    data = await state.get_data()
    gender = data.get("gender")
    if not gender:
        await messages[-1].answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª")
        return
    
    photos_path = BASE_DIR / "media" / "photos"
    
    if not os.path.exists(photos_path):
        os.makedirs(photos_path)
    
    if len(messages) != 10:
        await messages[-1].answer("–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ 10 —Ñ–æ—Ç–æ")
        return
        
    for m in messages:
        if m.photo:
            photo = await bot.get_file(m.photo[-1].file_id)
            file_path = photo.file_path
            output_filename = f"{photos_path}/{uuid4()}_{file_path.replace('photos/', '')}"
            await m.bot.download_file(
                file_path, destination=output_filename
            )
            response = await create_img_path(
                tg_user_id=str(m.chat.id),
                path=output_filename
            )
    
    await messages[-1].answer(
        """–ú—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–≤–æ–∏ —Ñ–æ—Ç–æ –∏ –∑–∞–ø—É—Å—Ç–∏–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —Ç–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞, —ç—Ç–æ –∑–∞–π–º—ë—Ç –æ–∫–æ–ª–æ 5 –º–∏–Ω—É—Ç ‚Ä¶ üîÑ

–ê —Ç—ã –ø–æ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª @‚Ä¶

–¢–∞–º –º—ã –ø—É–±–ª–∏–∫—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–¥–µ–∏ —Å—Ç–∏–ª–µ–π –∏ –ø—Ä–æ–º—Ç–æ–≤ –¥–ª—è —Ç–≤–æ–∏—Ö –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –∞ —Ç–∞–∫–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏.
""", 
    )
    images = await get_user_images(str(messages[-1].chat.id))
    imgs = []
    for i in images:
        i = i.get("path")
        imgs.append(i)
    response = await learn_model_api(imgs, gender)
    tune_id = response.get("id")
    training_complete = await wait_for_training(tune_id)
    if training_complete:
        response_tune = await create_tune(tune_id=str(tune_id), tg_user_id=str(messages[-1].chat.id), gender=gender)
        log.debug(response_tune)
        await state.update_data(tune_id=tune_id)
        keyboard = get_main_keyboard()
        await messages[-1].answer(
            """–¢–≤–æ–π –∞–≤–∞—Ç–∞—Ä —Å–æ–∑–¥–∞–Ω ‚òëÔ∏è
–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º! –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∏–ª–∏" –∏–ª–∏ "–†–µ–∂–∏–º –±–æ–≥–∞" –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞.
""", reply_markup=keyboard
        )


@user_router.callback_query(F.data == "avatar")
async def avatar_callback(call: types.CallbackQuery):
    tunes = await get_tunes(str(call.message.chat.id))
    log.debug(tunes)
    builder = InlineKeyboardBuilder()
    for i, tune in enumerate(tunes, 1):
        builder.button(
            text=f"–ú–æ–¥–µ–ª—å {i}",
            callback_data=f"tune_{tune.get('tune')}_{i}"
        )
    builder.button(
        text=f"–î–æ–±–∞–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä",
        callback_data=f"start_upload_photo"
    )
    builder.adjust(3, 3, 3, 1)
    await call.message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
        reply_markup=builder.as_markup()
    )
    
    
@user_router.callback_query(F.data.contains("tune_"))
async def select_avatar_callback(call: types.CallbackQuery, state: FSMContext):
    tune_id = call.data.split("_")[1]
    tune_num = call.data.split("_")[-1]
    await state.update_data(tune_id=tune_id)
    keyboard = get_main_keyboard()
    await call.message.answer(
        text=f"–°–º–µ–Ω–∞ –º–æ–¥–µ–ª–∏ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ¬´–ú–æ–¥–µ–ª—å ‚Ññ{tune_num}¬ª ‚úÖ",
        reply_markup=keyboard
    )


@user_router.callback_query(F.data == "inst")
async def inst_callback(call: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="–î–∞–ª—å—à–µ!",
            callback_data="how_price"
        ),
    )
    await call.message.answer(
        text="–ü–æ–¥–æ–π–¥—É—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ª—é–±–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –Ω–æ —Å—Ç—É–¥–∏–π–Ω—ã–µ –º–æ–≥—É—Ç –¥–∞—Ç—å –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!",
        reply_markup=builder.as_markup()
    )
    

@user_router.callback_query(F.data == "generations_stat")
async def generations_stat_callback(call: types.CallbackQuery):
    user_db = await get_user(call.message.chat.id)
    builder = InlineKeyboardBuilder()
    builder.button(
        text="100 —Ñ–æ—Ç–æ",
        callback_data="photo"
    )
    builder.button(
        text="500 —Ñ–æ—Ç–æ",
        callback_data="photo"
    )
    await call.message.answer(
        text="""
–£ –≤–∞—Å {count_gen} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π!
–†–∞–¥—ã, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å! 
–•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π? üì∏
–í–∞—Ä–∏–∞–Ω—Ç—ã:
* 100 —Ñ–æ—Ç–æ: 990‚ÇΩ
* 500 —Ñ–æ—Ç–æ: 3710‚ÇΩ (—Å–∫–∏–¥–∫–∞ 25%!)
–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç!
""".format(count_gen=user_db.count_generation),
        reply_markup=builder.as_markup()
    )
    
    
@user_router.callback_query(F.data == "how_price")
async def how_price_callback(call: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–ê —Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?",
        callback_data="inst_payment"
    )
    builder.button(
        text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å!",
        callback_data="try_it_gen"
    )
    await call.message.answer(
        text="""–ù–∞—à–∏ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–∏ —Å–¥–µ–ª–∞–ª–∏ –¥–≤–∞ —Ä–µ–∂–∏–º–∞:

1. –° —É–∂–µ –≥–æ—Ç–æ–≤—ã–º–∏ –∏–¥–µ—è–º–∏. –¢–∞–º —É–∂–µ 70+ —Å—Ç–∏–ª–µ–π. –û—Ç –ø—Ä–∏–Ω—Ü–µ—Å—Å—ã –¥–æ –•–∞–ª–∫–∞!
2. –ù–æ –µ—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —á—Ç–æ-—Ç–æ —Å–≤–æ–µ, –µ—Å—Ç—å —Ä–µ–∂–∏–º –±–æ–≥–∞, –≥–¥–µ —Ç—ã —Å–∞–º —Ä–µ—à–∞–µ—à—å, –∫–µ–º –±—ã—Ç—å! –ü—Ä–æ—Å—Ç–æ –ø–∏—à–µ—à—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ—à—å –∫—Ä—É—Ç—É—é –∫–∞—Ä—Ç–∏–Ω—É!""",
        reply_markup=builder.as_markup()
    )
    
    
@user_router.callback_query(F.data == "try_it_gen")
async def try_it_gen_callback(call: types.CallbackQuery):
    keyboard = get_main_keyboard()
    await call.message.answer(
        text="""–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é""",
        reply_markup=keyboard
    )
    
    
@user_router.callback_query(F.data.in_(["man", "woman"]))
async def gender_selection(call: types.CallbackQuery, state: FSMContext):
    gender = call.data
    await state.update_data(gender=gender)
    await call.message.answer("""
        –ò–ù–°–¢–†–£–ö–¶–ò–Ø...

–ó–∞–≥—Ä—É–∑–∏ 10 —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –æ–±—É—á–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ üì≤

–í–∞–∂–Ω–æ:
    ‚Äì –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ —Å—Ç—Ä–æ–≥–æ 10 —Ñ–æ—Ç–æ. –ù–µ 5, –Ω–µ 8 –∏ –Ω–µ 16.
    ‚Äì –ò—Å–ø–æ–ª—å–∑—É–π –∫—Ä—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã —Å–≤–æ–µ–≥–æ –ª–∏—Ü–∞ –∏–ª–∏ —Å–µ–ª—Ñ–∏, –∏–∑–±–µ–≥–∞–π —Å–Ω–∏–º–∫–æ–≤ —Å –¥–∞–ª—å–Ω–µ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è.
    ‚Äì –ù–∞ —Ñ–æ—Ç–æ –¥–æ–ª–∂–µ–Ω(–Ω–∞) –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ç—ã ‚Äî –±–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª–µ–π, –±–∞–±—É—à–µ–∫ –∏ –¥–æ–º–∞—à–Ω–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö.
    ‚Äì –ù–µ –≤—ã–±–∏—Ä–∞–π—Ç–µ —Ñ–æ—Ç–æ —Å —Ä–µ–∑–∫–∏–º–∏ —ç–º–æ—Ü–∏—è–º–∏, –º–∞–∫—Å–∏–º—É–º –ª–µ–≥–∫–∞—è —É–ª—ã–±–∫–∞.
    ‚Äì –ó–∞–≥—Ä—É–∂–∞–π —Ñ–æ—Ç–æ –≤ –ø—Ä—è–º–æ–π –ø–æ–∑–µ, –±–µ–∑ –Ω–∞–∫–ª–æ–Ω–æ–≤ –≥–æ–ª–æ–≤—ã –∏–ª–∏ —à–µ–∏.
    ‚Äì –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.

–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –∏ –æ–±—É—á–∏—Ç—å –±–æ—Ç–∞ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑! –ü–æ–¥—Ö–æ–¥–∏—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ç–æ –∏ —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏!

–ï—Å–ª–∏ iPhone –ø—Ä–µ–¥–ª–æ–∂–∏—Ç ¬´–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ JPEG¬ª, —Å–æ–≥–ª–∞—à–∞–π—Å—è üëç

–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –±–æ—Ç–∞ ‚¨áÔ∏è

        """)
    
    
@user_router.callback_query(F.data == "start_upload_photo")
async def start_upload_photo_callback(call: types.CallbackQuery):
    user_db = await get_user(str(call.message.chat.id))
    if user_db.get("is_learn_model"):
        builder = InlineKeyboardBuilder()
        builder.button(
            text="–ú—É–∂—á–∏–Ω–∞",
            callback_data="man"
        )
        builder.button(
            text="–ñ–µ–Ω—â–∏–Ω–∞",
            callback_data="woman"
        )
        await call.message.answer(
            text="""–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª""",
            reply_markup=builder.as_markup()
        )
    
    
@user_router.callback_query(F.data == "styles_effect")
async def styles_effect_callback(call: types.CallbackQuery, state: FSMContext):
    
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–ö–∏–Ω–æ—ç—Ñ—Ñ–µ–∫—Ç",
        callback_data="Cinematic_effect"
    )
    builder.button(
        text="–ù–µ–æ–Ω",
        callback_data="Neonpunk_effect"
    )
    builder.button(
        text="–ë–µ–∑ —ç—Ñ—Ñ–µ–∫—Ç–∞",
        callback_data="no_effect"
    )
    await call.message.answer(
        text="""–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç""",
        reply_markup=builder.as_markup()
    )
    
    
@user_router.callback_query(F.data == "inst_payment")
async def inst_payment_callback(call: types.CallbackQuery):
    —Åount_generations = 100
    amount = 100
    payment_id = random.randint(999, 99999)
    await create_payment(
        tg_user_id=str(call.message.chat.id),
        amount=str(amount),
        payment_id=str(payment_id),
        —Åount_generations=—Åount_generations,
    )
    payment_link = generate_payment_link(
        ROBOKASSA_MERCHANT_ID,
        ROBOKASSA_TEST_PASSWORD1,
        amount,
        int(payment_id),
        f"{payment_id}",
        is_test=1,
    )
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–ö–∞—Ä—Ç–∞ –†–§",
        url=payment_link
    )
    builder.button(
        text="–ù–∞ –≥–ª–∞–≤–Ω—É—é",
        callback_data="home"
    )
    await call.message.answer(
        text="""–¢–µ–ø–µ—Ä—å —Å–∞–º–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ! –ú–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –∫–∞–∫ —Å –∫–∞—Ä—Ç—ã –†–§, —Ç–∞–∫ –∏ —Å –∑–∞—Ä—É–±–µ–∂–Ω–æ–π.

–°–µ–π—á–∞—Å –º—ã —Å–Ω–∏–∑–∏–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ 52%! 
1390‚ÇΩ –≤–º–µ—Å—Ç–æ 2890‚ÇΩ

–ò –∑–∞ —ç—Ç–æ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å:
‚úîÔ∏è 100 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
‚úîÔ∏è 100 —Å—Ç–∏–ª–µ–π –Ω–∞ –≤–∞—à –≤—ã–±–æ—Ä
‚úîÔ∏è 1 –º–æ–¥–µ–ª—å
‚úîÔ∏è —Ä–µ–∂–∏–º –±–æ–≥–∞!""",
        reply_markup=builder.as_markup()
    )


@user_router.callback_query(F.data == "home")
async def home_callback(call: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
            callback_data="inst"
        ),
        types.InlineKeyboardButton(
            text="–û–ø–ª–∞—Ç–∏—Ç—å",
            callback_data="inst_payment"
        ),
    )
    await call.message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞ —Å–≤—è–∑–∏ –ü–∏–Ω–≥–≤–∏–Ω –±–æ—Ç. \n–†–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∫–∞–∫ –∑–¥–µ—Å—å –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç?\n–ï—Å–ª–∏ —Ç—ã —É–∂–µ –≤ –∫—É—Ä—Å–µ, –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –≤–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É - –∏ –≤–ø–µ—Ä–µ–¥!\n\n–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥ –¥—Ä—É–≥–∏–º–∏ –±–æ—Ç–∞–º–∏:\n–í–º–µ—Å—Ç–æ 25 —à–∞–±–ª–æ–Ω–æ–≤ - –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n–ö –∫–∞–∂–¥–æ–º—É —Ñ–æ—Ç–æ –≤ ¬´–°—Ç–∏–ª–∏¬ª —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã\n–ß–∞—Ç-–±–æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–º—Ç –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–æ–≥–æ —Ñ–æ—Ç–æ\n–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: –ø—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n–¶–µ–Ω–∞ –≤—Å–µ–≥–æ 990 —Ä—É–±.\n", reply_markup=builder.as_markup())

    
@user_router.callback_query(F.data.contains("_effect"))
async def handle_effect_handler(call: types.CallbackQuery, state: FSMContext):
    
    BASE_DIR = Path(__file__).resolve().parent.parent
    json_file = BASE_DIR / "media" / "promts.json"
    effect = call.data
    await state.update_data(effect=effect)
    
    data = await state.get_data()
    
    gender: str = data.get("gender")
    if not gender:
        tunes = await get_tunes(str(call.message.chat.id))
        if not tunes:
            await call.message.answer("–£ –í–∞—Å –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ!", reply_markup=get_main_keyboard())
            return
        gender = tunes[0].get("gender")
        tune_id = tunes[0].get("tune_id")
        await state.update_data(gender=gender, tune_id=tune_id)
    
    data = await state.get_data()
    log.debug(data)
    categories = get_categories(gender=gender, json_file=json_file)
    builder = InlineKeyboardBuilder()
    for c in categories:
        builder.button(
            text=c.get("name"),
            callback_data=c.get("slug")
        )
    builder.adjust(2,2,2,2,2)
    builder.button(
        text="–ù–∞ –≥–ª–∞–≤–Ω—É—é",
        callback_data="home"
    )
    # builder.adjust(2, 2, 3, repeat=True)
    await call.message.answer(text="""–í—ã–±–µ—Ä–∏ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è —Å—Ç–∏–ª—å –∏ —Ñ–∏–ª—å—Ç—Ä, –ø–æ–ª—É—á–∏—Ç–µ 3 —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥.

–í –∫–∞–∂–¥–æ–º —Å—Ç–∏–ª–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–±–∏—Ä–∞—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º.
""", reply_markup=builder.as_markup())
    

    
@user_router.callback_query(F.data.contains("category_"))
async def handle_category_handler(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    effect: str = data.get("effect")
    gender: str = data.get("gender")
    tune_id: int = data.get("tune_id")
    
    BASE_DIR = Path(__file__).resolve().parent.parent
    json_file = BASE_DIR / "media" / "promts.json"
    
    user_db = await get_user(str(call.message.chat.id))
    if user_db.get("count_generations") < 3:
        builder = InlineKeyboardBuilder()
        builder.button(
            text="–ö—É–ø–∏—Ç—å",
            callback_data="inst_payment"
        )
        await call.message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", reply_markup=builder.as_markup()) 
        return
    
    category_slug = call.data
    
    if not gender:
        tunes = await get_tunes(str(call.message.chat.id))
        if not tunes:
            await call.message.answer("–£ –í–∞—Å –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ!", reply_markup=get_main_keyboard())
            return
        gender = tunes[0].get("gender")
        tune_id = tunes[0].get("tune_id")
        await state.update_data(gender=gender, tune_id=tune_id)
    log.debug(tune_id)
    if not effect:
        builder = InlineKeyboardBuilder()
        builder.button(
            text="–í—ã–±—Ä–∞—Ç—å",
            callback_data="styles_effect"
        )
        await call.message.answer("–£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω —ç—Ñ—Ñ–µ–∫—Ç", reply_markup=builder.as_markup())
        return
        
    user_prompt = get_random_prompt(json_file=json_file, gender=gender, category_slug=category_slug)
        
    if effect != "no_effect":
        effect = effect.split("_")[0]
    else:
        effect = None
    gen_response = await generate_images(
        tune_id=int(tune_id), 
        promt=user_prompt,
        effect=effect
    )
    
    if not gen_response or "id" not in gen_response:
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
        return

    prompt_id = gen_response["id"]
    await call.message.answer("–°–æ–∑–¥–∞–µ–º –≤–∞—à–µ —Ñ–æ—Ç–æ, –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ")

    image_urls = await wait_for_generation(prompt_id)
    media_group = MediaGroupBuilder(caption="üñº –í–∞—à–∏ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    if image_urls:
        for i in image_urls:
            media_group.add(type="photo", media=i)
    else:
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        
    user_db = await get_user(str(call.message.chat.id))
    new_count_gen = user_db.get("count_generations") - 3
    upd_res = await update_user(str(call.message.chat.id), count_generations=new_count_gen)
    log.debug(upd_res)
    await bot.send_media_group(chat_id=call.message.chat.id, media=media_group.build())
    
    await delete_user_images(str(call.message.chat.id))
    
    
def get_main_keyboard():
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="–°—Ç–∏–ª–∏", callback_data="styles_effect"), types.InlineKeyboardButton(text="–†–µ–∂–∏–º –±–æ–≥–∞", callback_data="god_mod")],
            [types.InlineKeyboardButton(text="–ê–≤–∞—Ç–∞—Ä", callback_data="avatar"), types.InlineKeyboardButton(text="–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="generations_stat")],
            [types.InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"), types.InlineKeyboardButton(text="–°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã", callback_data="service")],
        ],
    )
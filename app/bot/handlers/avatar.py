import asyncio
from pathlib import Path

from aiogram_media_group import media_group_handler
from aiogram import types, Router, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from core.backend.api import (
    get_user,  
    update_user,
    get_avatar_price_list,
    get_tunes,
    get_tune
)
from core.logger.logger import get_logger

from .utils import (
    process_learning,
    get_main_keyboard,
)


avatar_router = Router()
log = get_logger()

BASE_DIR = Path(__file__).resolve().parent.parent

class LearnModel(StatesGroup):
    name = State()
    photo = State()


@avatar_router.callback_query(F.data.contains("tune_"))
async def select_avatar_callback(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    tune_id = call.data.split("_")[1]
    tune = await get_tune(str(tune_id))
    asyncio.create_task(
        update_user(data={
            "tg_user_id": str(call.message.chat.id),
            "tune_id": str(tune_id),
            "gender": tune.get("gender")
        })
    )
    keyboard = get_main_keyboard()
    await call.message.answer(
        text=f"–°–º–µ–Ω–∞ –∞–≤–∞—Ç–∞—Ä–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ",
        reply_markup=keyboard
    )
    
    
@avatar_router.callback_query(F.data == "set_avatar")
async def avatar_callback(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    asyncio.create_task(
        update_user(data={"photo_from_photo": False})
    )
    tunes = await get_tunes(str(call.message.chat.id))
    if not tunes:
        builder = InlineKeyboardBuilder()
        builder.button(
            text=f"–î–æ–±–∞–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä",
            callback_data=f"start_upload_photo"
        )
        await call.message.answer("–£ –í–∞—Å –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ!", reply_markup=builder.as_markup())
    builder = InlineKeyboardBuilder()
    for tune in tunes:
        builder.button(
            text=tune.get('name'),
            callback_data=f"tune_{tune.get('tune_id')}"
        )
    
    builder.button(
        text=f"–î–æ–±–∞–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä",
        callback_data=f"start_upload_photo"
    )
    builder.adjust(1, 1, 1, 1)
    await call.message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤–∞—Ç–∞—Ä:",
        reply_markup=builder.as_markup()
    )


@avatar_router.message(F.text == "–í—ã–±–æ—Ä –∞–≤–∞—Ç–∞—Ä–∞")
async def avatar_handler(message: types.Message, state: FSMContext):
    await state.clear()
    tunes = await get_tunes(str(message.chat.id))
    if not tunes:
        builder = InlineKeyboardBuilder()
        builder.button(
            text=f"–î–æ–±–∞–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä",
            callback_data=f"start_upload_photo"
        )
        await message.answer("–£ –í–∞—Å –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ!", reply_markup=builder.as_markup())
    builder = InlineKeyboardBuilder()
    for tune in tunes:
        builder.button(
            text=tune.get('name'),
            callback_data=f"tune_{tune.get('tune_id')}"
        )
    
    builder.button(
        text=f"–î–æ–±–∞–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä",
        callback_data=f"start_upload_photo"
    )
    builder.adjust(1, 1, 1, 1)
    
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤–∞—Ç–∞—Ä:",
        reply_markup=builder.as_markup()
    )
    
    
@avatar_router.message(LearnModel.name)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text 
    if len(name) > 20:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â—ë —Ä–∞–∑.")
        return 
    await state.update_data(name=name) 
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–ú—É–∂—á–∏–Ω–∞",
        callback_data="man"
    )
    builder.button(
        text="–ñ–µ–Ω—â–∏–Ω–∞",
        callback_data="woman"
    )
    await message.answer(
        text="""–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å ‚ù§Ô∏è
<b>–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø–æ–ª:</b>""",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await state.set_state(LearnModel.photo)


@avatar_router.message(F.media_group_id, LearnModel.photo)
@media_group_handler
async def handle_albums(messages: list[types.Message], state: FSMContext):
    user_data = await state.get_data()
    name = user_data.get("name")
    user_db = await get_user(messages[-1].chat.id)
    if not user_db.get("is_learn_model"):
        avatar_price_list = await get_avatar_price_list()
        builder = InlineKeyboardBuilder()
        builder.button(
            text=f"{avatar_price_list.get('count')} –º–æ–¥–µ–ª—å",
            callback_data=f"inst_payment_{avatar_price_list.get('price')}_0_{avatar_price_list.get('learn_model')}_0"
        )
        await messages[-1].answer("–û–ø–ª–∞—Ç–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞", reply_markup=builder.as_markup())
        return
    gender = user_data.get("gender") or user_db.get("gender")
    if not gender:
        await messages[-1].answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª", reply_markup=get_main_keyboard())
        return
    
    if len(messages) != 10:
        await messages[-1].answer("–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ 10 —Ñ–æ—Ç–æ")
        return
    
    asyncio.create_task(
        update_user(data={
            "tg_user_id": str(messages[0].chat.id),
            "is_learn_model": False,
            "gender": gender
        })
    )
    
    await state.clear()
    
    await messages[-1].answer(
        """–ú—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–≤–æ–∏ —Ñ–æ—Ç–æ –∏ –∑–∞–ø—É—Å—Ç–∏–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —Ç–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞, —ç—Ç–æ –∑–∞–π–º—ë—Ç –æ–∫–æ–ª–æ 5-10 –º–∏–Ω—É—Ç ‚Ä¶ üîÑ

–ê —Ç—ã –ø–æ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª https://t.me/photopingvin_ai

–¢–∞–º –º—ã –ø—É–±–ª–∏–∫—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–¥–µ–∏ —Å—Ç–∏–ª–µ–π –∏ –ø—Ä–æ–º—Ç–æ–≤ –¥–ª—è —Ç–≤–æ–∏—Ö –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –∞ —Ç–∞–∫–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏.
""")
    asyncio.create_task(process_learning(messages, gender, name))    
    

@avatar_router.callback_query(F.data.in_(["man", "woman"]))
async def gender_selection(call: types.CallbackQuery, state: FSMContext):    
    await state.update_data(gender=call.data)
    
    asyncio.create_task(
        update_user(data={
            "tg_user_id": str(call.message.chat.id),
            "gender": call.data,
        })
    )
    
    await call.message.answer_photo(
        photo=types.FSInputFile(BASE_DIR / "media" / "inst.png"),
        caption="""
        <b>–ò–ù–°–¢–†–£–ö–¶–ò–Ø...</b>

<b>–ó–∞–≥—Ä—É–∑–∏ 10 —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –æ–±—É—á–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</b> üì≤

<b>–í–∞–∂–Ω–æ:</b>
    ‚Äì –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ —Å—Ç—Ä–æ–≥–æ 10 —Ñ–æ—Ç–æ. –ù–µ 5, –Ω–µ 8 –∏ –Ω–µ 16.
    ‚Äì –ò—Å–ø–æ–ª—å–∑—É–π –∫—Ä—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã —Å–≤–æ–µ–≥–æ –ª–∏—Ü–∞ –∏–ª–∏ —Å–µ–ª—Ñ–∏, –∏–∑–±–µ–≥–∞–π —Å–Ω–∏–º–∫–æ–≤ —Å –¥–∞–ª—å–Ω–µ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è.
    ‚Äì –ù–∞ —Ñ–æ—Ç–æ –¥–æ–ª–∂–µ–Ω(–Ω–∞) –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ç—ã ‚Äî –±–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª–µ–π, –±–∞–±—É—à–µ–∫ –∏ –¥–æ–º–∞—à–Ω–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö.
    ‚Äì –ù–µ –≤—ã–±–∏—Ä–∞–π—Ç–µ —Ñ–æ—Ç–æ —Å —Ä–µ–∑–∫–∏–º–∏ —ç–º–æ—Ü–∏—è–º–∏, –º–∞–∫—Å–∏–º—É–º –ª–µ–≥–∫–∞—è —É–ª—ã–±–∫–∞.
    ‚Äì –ó–∞–≥—Ä—É–∂–∞–π —Ñ–æ—Ç–æ –≤ –ø—Ä—è–º–æ–π –ø–æ–∑–µ, –±–µ–∑ –Ω–∞–∫–ª–æ–Ω–æ–≤ –≥–æ–ª–æ–≤—ã –∏–ª–∏ —à–µ–∏.
    ‚Äì –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.

<b>–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –∏ –æ–±—É—á–∏—Ç—å –±–æ—Ç–∞ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑! –ü–æ–¥—Ö–æ–¥–∏—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ç–æ –∏ —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏!</b>

–ï—Å–ª–∏ iPhone –ø—Ä–µ–¥–ª–æ–∂–∏—Ç ¬´–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ JPEG¬ª, —Å–æ–≥–ª–∞—à–∞–π—Å—è üëç

–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –±–æ—Ç–∞ ‚¨áÔ∏è
        """, parse_mode="HTML"
    )
    await state.set_state(LearnModel.photo) 
    
    
@avatar_router.callback_query(F.data == "start_upload_photo")
async def start_upload_photo_callback(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    user_db = await get_user(str(call.message.chat.id))
    if not user_db.get("is_learn_model"):
        avatar_price_list = await get_avatar_price_list()
        builder = InlineKeyboardBuilder()
        builder.button(
            text=f"{avatar_price_list.get('count')} –º–æ–¥–µ–ª—å",
            callback_data=f"inst_payment_{avatar_price_list.get('price')}_0_{avatar_price_list.get('learn_model')}_0"
        )
        await call.message.answer("–û–ø–ª–∞—Ç–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞", reply_markup=builder.as_markup())
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞:")
    await state.set_state(LearnModel.name) 


def setup(dp):
    dp.include_router(avatar_router)

from pathlib import Path
from uuid import uuid4
import os
from aiogram_media_group import media_group_handler


from aiogram import types, Router, F
from aiogram.filters import CommandStart
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loguru import logger as log

from data.messages import use_messages
from core.backend.api import (
    create_user_db, 
    create_img_path, 
    delete_user_images, 
    get_user_images,
)
from core.generation.photo import (
    learn_model_api, 
    wait_for_training, 
    generate_images, 
    wait_for_generation
)
from loader import bot


user_router = Router()

BASE_DIR = Path(__file__).resolve().parent.parent.parent


class UploadImage(StatesGroup):
    photo = State()


@user_router.message(CommandStart())
@use_messages
async def start_handler(message: types.Message, messages):
    await create_user_db(
        tg_user_id=message.from_user.id,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        username=message.from_user.username
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
            callback_data="inst"
        ),
        types.InlineKeyboardButton(
            text="–û–ø–ª–∞—Ç–∏—Ç—å",
            callback_data="pay"
        ),
    )
    await message.answer(messages["start"], reply_markup=builder.as_markup())
    

@user_router.message(F.media_group_id)
@media_group_handler
async def handle_albums(messages: list[types.Message]):
    photos_path = BASE_DIR / "media" / "photos"
    
    if len(messages) != 10:
        await messages[-1].answer("–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ 10 —Ñ–æ—Ç–æ")
        return
        
    for m in messages:
        if m.photo:
            photo = await bot.get_file(m.photo[-1].file_id)
            output_filename = f"{photos_path}/{uuid4()}_{photo.file_path.replace('photos/', '')}"
            await m.bot.download_file(
                photo.file_path, destination=output_filename
            )
            response = await create_img_path(
                tg_user_id=str(m.chat.id),
                path=output_filename
            )
    
    await messages[-1].answer(
        """–ú—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–≤–æ–∏ —Ñ–æ—Ç–æ –∏ –∑–∞–ø—É—Å—Ç–∏–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —Ç–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞, —ç—Ç–æ –∑–∞–π–º—ë—Ç –æ–∫–æ–ª–æ 5 –º–∏–Ω—É—Ç ‚Ä¶ üîÑ

–ê —Ç—ã –ø–æ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª @‚Ä¶

–¢–∞–º –º—ã –ø—É–±–ª–∏–∫—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–¥–µ–∏ —Å—Ç–∏–ª–µ–π –∏ –ø—Ä–æ–º—Ç–æ–≤ –¥–ª—è —Ç–≤–æ–∏—Ö –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –∞ —Ç–∞–∫–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏.
""", 
    )
    images = await get_user_images(str(messages[-1].chat.id))
    imgs = []
    for i in images:
        imgs.append(i.get("path"))
    response = await learn_model_api(imgs)
    tune_id = response.get("id")
    training_complete = await wait_for_training(tune_id)
    if training_complete:
        keyboard = types.InlineKeyboardButton(
        keyboard=[
            [types.InlineKeyboardButton(text="–°—Ç–∏–ª–∏", callback_data="styles"), types.InlineKeyboardButton(text="–†–µ–∂–∏–º –±–æ–≥–∞", callback_data="god_mod")],
            [types.InlineKeyboardButton(text="–ê–≤–∞—Ç–∞—Ä", callback_data="avatar"), types.InlineKeyboardButton(text="–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="generation")],
            [types.InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"), types.InlineKeyboardButton(text="–°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã", callback_data="service")],
        ],
        resize_keyboard=True
    )
        await messages[-1].answer(
            """–¢–≤–æ–π –∞–≤–∞—Ç–∞—Ä —Å–æ–∑–¥–∞–Ω ‚òëÔ∏è
–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º! –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∏–ª–∏" –∏–ª–∏ "–†–µ–∂–∏–º –±–æ–≥–∞" –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞.
""", reply_markup=keyboard
        )


@user_router.callback_query(F.data == "inst")
async def inst_callback(call: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="–î–∞–ª—å—à–µ!",
            callback_data="upl_img_next"
        ),
    )
    await call.message.answer(
        text="–ü–æ–¥–æ–π–¥—É—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ª—é–±–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –Ω–æ —Å—Ç—É–¥–∏–π–Ω—ã–µ –º–æ–≥—É—Ç –¥–∞—Ç—å –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!",
        reply_markup=builder.as_markup()
    )
    
    
@user_router.callback_query(F.data == "upl_img_next")
async def upl_img_next_callback(call: types.CallbackQuery):
    await call.message.answer(
        text="""
        –ò–ù–°–¢–†–£–ö–¶–ò–Ø...

–ó–∞–≥—Ä—É–∑–∏ 10 —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –æ–±—É—á–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ üì≤

–í–∞–∂–Ω–æ:
    ‚Äì –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ —Å—Ç—Ä–æ–≥–æ 10 —Ñ–æ—Ç–æ. –ù–µ 5, –Ω–µ 8 –∏ –Ω–µ 16.
    ‚Äì –ò—Å–ø–æ–ª—å–∑—É–π –∫—Ä—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã —Å–≤–æ–µ–≥–æ –ª–∏—Ü–∞ –∏–ª–∏ —Å–µ–ª—Ñ–∏, –∏–∑–±–µ–≥–∞–π —Å–Ω–∏–º–∫–æ–≤ —Å –¥–∞–ª—å–Ω–µ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è.
    ‚Äì –ù–∞ —Ñ–æ—Ç–æ –¥–æ–ª–∂–µ–Ω(–Ω–∞) –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ç—ã ‚Äî –±–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª–µ–π, –±–∞–±—É—à–µ–∫ –∏ –¥–æ–º–∞—à–Ω–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö.
    ‚Äì –ù–µ –≤—ã–±–∏—Ä–∞–π—Ç–µ —Ñ–æ—Ç–æ —Å —Ä–µ–∑–∫–∏–º–∏ —ç–º–æ—Ü–∏—è–º–∏, –º–∞–∫—Å–∏–º—É–º –ª–µ–≥–∫–∞—è —É–ª—ã–±–∫–∞.
    ‚Äì –ó–∞–≥—Ä—É–∂–∞–π —Ñ–æ—Ç–æ –≤ –ø—Ä—è–º–æ–π –ø–æ–∑–µ, –±–µ–∑ –Ω–∞–∫–ª–æ–Ω–æ–≤ –≥–æ–ª–æ–≤—ã –∏–ª–∏ —à–µ–∏.
    ‚Äì –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.

–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –∏ –æ–±—É—á–∏—Ç—å –±–æ—Ç–∞ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑! –ü–æ–¥—Ö–æ–¥–∏—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ç–æ –∏ —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏!

–ï—Å–ª–∏ iPhone –ø—Ä–µ–¥–ª–æ–∂–∏—Ç ¬´–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ JPEG¬ª, —Å–æ–≥–ª–∞—à–∞–π—Å—è üëç

–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –±–æ—Ç–∞ ‚¨áÔ∏è

        """,
    )


# @user_router.callback_query(F.data == "learn_model")
# async def learn_model_callback(call: types.CallbackQuery):
#     images = await get_user_images(str(call.message.chat.id))
#     imgs = []
#     for i in images:
#         imgs.append(i.get("path"))
#     response = await learn_model_api(imgs)
#     tune_id = response.get("id")
#     # await call.message.answer(f"–ú–æ–¥–µ–ª—å –æ–±—É—á–∞–µ—Ç—Å—è... Tune ID: {tune_id}")

#     training_complete = await wait_for_training(tune_id)

#     if training_complete:
#         builder = InlineKeyboardBuilder()
#         builder.add(
#             types.InlineKeyboardButton(
#                 text="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è",
#                 callback_data=f"generation_{tune_id}"
#             ),
#         )
#         await call.message.answer(
#             "‚úÖ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üé®", 
#             reply_markup=builder.as_markup()
#         )
#     else:
#         await call.message.answer("‚ùå –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    
@user_router.message(F.text == "–°—Ç–∏–ª–∏")
async def generation_callback(call: types.CallbackQuery):
    tune_id = call.data.split("_")[1]
    user_prompt = "a painting of sks man / woman in the style of Van Gogh"      
    gen_response = await generate_images(tune_id=tune_id, promt=user_prompt)
    
    if not gen_response or "id" not in gen_response:
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
        return

    prompt_id = gen_response["id"]
    await call.message.answer(f"üñº –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è... Prompt ID: {prompt_id}")

    image_urls = await wait_for_generation(prompt_id)
    media_group = MediaGroupBuilder(caption="üñº –í–∞—à–∏ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    if image_urls:
        for i in image_urls:
            media_group.add(type="photo", media=i)

    else:
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        
    await bot.send_media_group(chat_id=call.message.chat.id, media=media_group.build())
    
    await delete_user_images(str(call.message.chat.id))

    


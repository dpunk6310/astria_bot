from pathlib import Path
from uuid import uuid4
import os

from aiogram import types, Router, F
from aiogram.filters import CommandStart
from aiogram.types import FSInputFile
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loguru import logger as log

from data.messages import use_messages
from core.backend.api import (
    create_user_db, 
    create_img_path, 
    delete_user_images, 
    get_user_images,
)
from core.generation.photo import learn_model_api, wait_for_training, generate_images, wait_for_generation
from loader import bot


user_router = Router()

BASE_DIR = Path(__file__).resolve().parent.parent.parent


class UploadImage(StatesGroup):
    photo = State()


@user_router.message(CommandStart())
@use_messages
async def start_handler(message: types.Message, messages):
    await create_user_db(
        tg_user_id=message.from_user.id,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        username=message.from_user.username
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
            callback_data="inst"
        ),
        types.InlineKeyboardButton(
            text="–û–ø–ª–∞—Ç–∏—Ç—å",
            callback_data="pay"
        ),
    )
    builder.add(
        types.InlineKeyboardButton(
            text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ",
            callback_data="upload_images"
        ),
    )
    
    photo_path = BASE_DIR / "media/logo_p.png"
    await message.answer(messages["start"], reply_markup=builder.as_markup())
    # await message.answer_photo(
    #     photo=FSInputFile(photo_path),
    #     caption=messages["start"],
    #     reply_markup=builder.as_markup()
    # )
    

@user_router.message()
async def handle_albums(message: types.Message):
    photos_path = BASE_DIR / "media" / "photos"
    photos = message.photo
    if photos:
        
        # –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–ª–∞–Ω—Å–∞
        
        if not os.path.exists(photos_path):
            os.makedirs(photos_path)
            
        photo = await bot.get_file(photos[-1].file_id)
        photo_file = photo.file_path
        output_filename = f"{photos_path}/{uuid4()}_{photo_file.replace('photos/', '')}"
        
        await message.bot.download_file(
            photo_file, destination=output_filename
        )
        response = await create_img_path(
            tg_user_id=str(message.chat.id),
            path=output_filename
        )
        # log.debug(images)
        # await bot.send_photo(
        #     message.chat.id, FSInputFile(BASE_DIR / "media" / photo.file_path), caption="–í–æ—Ç –æ–Ω–æ"
        # )

@user_router.callback_query(F.data == "upload_images")
async def upload_images_callback(call: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="–î–∞–ª—å—à–µ!",
            callback_data="upl_img_next"
        ),
    )
    await call.message.answer(
        text="–ü–æ–¥–æ–π–¥—É—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ª—é–±–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –Ω–æ —Å—Ç—É–¥–∏–π–Ω—ã–µ –º–æ–≥—É—Ç –¥–∞—Ç—å –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!",
        reply_markup=builder.as_markup()
    )
    
    
@user_router.callback_query(F.data == "upl_img_next")
async def upl_img_next_callback(call: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏",
            callback_data="learn_model"
        ),
    )
    await call.message.answer(
        text="""
        –ò–ù–°–¢–†–£–ö–¶–ò–Ø

–ó–∞–≥—Ä—É–∑–∏ 10 —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –æ–±—É—á–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ üì≤

–í–∞–∂–Ω–æ:
    ‚Äì –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ —Å—Ç—Ä–æ–≥–æ 10 —Ñ–æ—Ç–æ. –ù–µ 5, –Ω–µ 8 –∏ –Ω–µ 16.
    ‚Äì –ò—Å–ø–æ–ª—å–∑—É–π –∫—Ä—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã —Å–≤–æ–µ–≥–æ –ª–∏—Ü–∞ –∏–ª–∏ —Å–µ–ª—Ñ–∏, –∏–∑–±–µ–≥–∞–π —Å–Ω–∏–º–∫–æ–≤ —Å –¥–∞–ª—å–Ω–µ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è.
    ‚Äì –ù–∞ —Ñ–æ—Ç–æ –¥–æ–ª–∂–µ–Ω(–Ω–∞) –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ç—ã ‚Äî –±–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª–µ–π, –±–∞–±—É—à–µ–∫ –∏ –¥–æ–º–∞—à–Ω–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö.
    ‚Äì –ù–µ –≤—ã–±–∏—Ä–∞–π—Ç–µ —Ñ–æ—Ç–æ —Å —Ä–µ–∑–∫–∏–º–∏ —ç–º–æ—Ü–∏—è–º–∏, –º–∞–∫—Å–∏–º—É–º –ª–µ–≥–∫–∞—è —É–ª—ã–±–∫–∞.
    ‚Äì –ó–∞–≥—Ä—É–∂–∞–π —Ñ–æ—Ç–æ –≤ –ø—Ä—è–º–æ–π –ø–æ–∑–µ, –±–µ–∑ –Ω–∞–∫–ª–æ–Ω–æ–≤ –≥–æ–ª–æ–≤—ã –∏–ª–∏ —à–µ–∏.
    ‚Äì –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.

–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –∏ –æ–±—É—á–∏—Ç—å –±–æ—Ç–∞ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑! –ü–æ–¥—Ö–æ–¥–∏—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ç–æ –∏ —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏!

–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"
        """,
        reply_markup=builder.as_markup()
    )


@user_router.callback_query(F.data == "learn_model")
async def learn_model_callback(call: types.CallbackQuery):
    # await call.message.answer(
    #     text="–ó–∞–ø—É—Å—Ç–∏–ª –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏",
    # )
    # images = await get_user_images(str(call.message.chat.id))
    # imgs = []
    # for i in images:
    #     imgs.append(i.get("path"))
    # response = await learn_model_api(imgs)
    # tune_id = response.get("id")
    # await call.message.answer(f"–ú–æ–¥–µ–ª—å –æ–±—É—á–∞–µ—Ç—Å—è... Tune ID: {tune_id}")

    # training_complete = await wait_for_training(tune_id)

    # if training_complete:
    #     await call.message.answer("‚úÖ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üé®")
    # else:
    #     await call.message.answer("‚ùå –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    user_prompt = "a painting of sks man / woman in the style of Van Gogh"      
    tune_id = 2104287
    gen_response = await generate_images(tune_id=tune_id, promt=user_prompt)
    
    if not gen_response or "id" not in gen_response:
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
        return

    prompt_id = gen_response["id"]
    await call.message.answer(f"üñº –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è... Prompt ID: {prompt_id}")

    image_urls = await wait_for_generation(prompt_id)
    
    img_msg = ""
    for i in image_urls:
        img_msg += f"{i}\n"
    
    if image_urls:
        await call.message.answer(img_msg)
    else:
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    
    await delete_user_images(str(call.message.chat.id))
    
    
        
    

    


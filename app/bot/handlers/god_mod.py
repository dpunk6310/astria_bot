import asyncio
from pathlib import Path

from aiogram import types, Router, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext

from core.backend.api import (
    get_user,
    get_tunes,
    update_user,
)
from core.logger.logger import get_logger
from .utils import save_promt
from loader import bot


log = get_logger()

god_mod_router = Router()

BUTTON_TEXTS = {
    "–°—Ç–∏–ª–∏", 
    "–†–µ–∂–∏–º –±–æ–≥–∞", 
    "–í—ã–±–æ—Ä –∞–≤–∞—Ç–∞—Ä–∞", 
    "–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏", 
    "–ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", 
    "–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", 
    "–§–æ—Ç–æ –ø–æ —Ñ–æ—Ç–æ",
    "FAQ",
    "–ü–æ–¥–∞—Ä–∏—Ç—å –ü–∏–Ω–≥–≤–∏–Ω –ò–ò",
}


@god_mod_router.message(F.text == "–†–µ–∂–∏–º –±–æ–≥–∞")
async def god_mod_callback(message: types.Message, state: FSMContext):
    # await state.clear()
    tunes = await get_tunes(str(message.chat.id))
    if not tunes:
        builder = InlineKeyboardBuilder()
        builder.button(
            text=f"–î–æ–±–∞–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä",
            callback_data=f"start_upload_photo"
        )
        await message.answer("–£ –í–∞—Å –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ!", reply_markup=builder.as_markup())
        return
    user_db = await get_user(str(message.chat.id))
    if user_db.get("photo_from_photo"):
        asyncio.create_task(
            update_user(data={"tg_user_id": str(message.chat.id), "photo_from_photo": False})
        )
        await message.answer(
            text="–†–µ–∂–∏–º –§–æ—Ç–æ –ø–æ —Ñ–æ—Ç–æ –≤—ã–∫–ª—é—á–µ–Ω",
        )
    god_mod = user_db.get("god_mod")
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
        callback_data="inst_god_mod"
    )
    if god_mod:
        builder.button(
            text="–í—ã–∫–ª. —Ä–µ–∂–∏–º –±–æ–≥–∞",
            callback_data="off_god_mod"
        )
    else:
        builder.button(
            text="–í–∫–ª. —Ä–µ–∂–∏–º –±–æ–≥–∞",
            callback_data="on_god_mod"
        )
    await message.answer(
        text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–º –±–æ–≥–∞ üí´",
        reply_markup=builder.as_markup()
    )
    
    
@god_mod_router.callback_query(F.data == "on_god_mod")
async def on_god_mod_callback(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    asyncio.create_task(
        update_user(data={
            "tg_user_id": str(call.message.chat.id),
            "god_mod": True,
            "photo_from_photo": False
        })
    )
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
        callback_data="inst_god_mod"
    )
    builder.button(
        text="–ù–∞ –≥–ª–∞–≤–Ω—É—é",
        callback_data="home"
    )
    await call.message.answer(
        text="""–†–µ–∂–∏–º –±–æ–≥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–∞–∫–æ–µ —Ñ–æ—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å, –∏ –æ–Ω —Å–æ–∑–¥–∞—Å—Ç –¥–ª—è —Ç–µ–±—è –∂–µ–ª–∞–Ω–Ω—ã–π –æ–±—Ä–∞–∑.
*–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∏–¥–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ‚¨áÔ∏è
""",
        reply_markup=builder.as_markup()
    )
    
    
@god_mod_router.callback_query(F.data == "off_god_mod")
async def off_god_mod_callback(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    asyncio.create_task(
        update_user(data={
            "tg_user_id": str(call.message.chat.id),
            "god_mod": False,
        })
    )
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–ù–∞ –≥–ª–∞–≤–Ω—É—é",
        callback_data="home"
    )
    await call.message.answer(
        text="–†–µ–∂–∏–º –±–æ–≥–∞ –≤—ã–∫–ª—é—á–µ–Ω!",
        reply_markup=builder.as_markup()
    )
    
    
@god_mod_router.message(F.text, ~F.text.in_(BUTTON_TEXTS))
async def set_text_in_godmod_callback(message: types.Message, state: FSMContext):
    if message.text in BUTTON_TEXTS:
        return
    
    user_db = await get_user(str(message.chat.id))
    
    if user_db.get("photo_from_photo") and message.photo or message.document:
        return
    
    if not user_db.get("photo_from_photo") and message.photo or message.document:
        builder = InlineKeyboardBuilder()
        builder.button(
            text="–í–∫–ª. –§–æ—Ç–æ –ø–æ —Ñ–æ—Ç–æ",
            callback_data="on_photofromphoto"
        )
        await message.answer(text="–í–∫–ª—é—á–∏—Ç–µ —Ä–µ–∂–∏–º –§–æ—Ç–æ –ø–æ —Ñ–æ—Ç–æ", reply_markup=builder.as_markup())
        return

    if not user_db.get("god_mod"):
        # await message.delete()
        builder = InlineKeyboardBuilder()
        builder.button(
            text="–í–∫–ª. —Ä–µ–∂–∏–º –±–æ–≥–∞",
            callback_data="on_god_mod"
        )
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–∫–ª—é—á–∏—Ç–µ —Ä–µ–∂–∏–º –±–æ–≥–∞", reply_markup=builder.as_markup())
        return
    
    if not user_db.get("tune_id"):
        builder = InlineKeyboardBuilder()
        builder.button(
            text="–í—ã–±—Ä–∞—Ç—å",
            callback_data="set_avatar"
        )
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–≤–∞—Ç–∞—Ä", reply_markup=builder.as_markup())
        return

    prompt_msg = await message.answer("–°–æ—Ö—Ä–∞–Ω—è—é —Ç–µ–∫—Å—Ç...")
    await save_promt(message)
    await bot.delete_message(message.chat.id, prompt_msg.message_id)
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–ö–∏–Ω–æ—ç—Ñ—Ñ–µ–∫—Ç",
        callback_data="Cinematic_effect"
    )
    builder.button(
        text="–ù–µ–æ–Ω",
        callback_data="Neonpunk_effect"
    )
    builder.button(
        text="–ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π",
        callback_data="Photographic_effect"
    )
    builder.button(
        text="–ë–µ–∑ —ç—Ñ—Ñ–µ–∫—Ç–∞",
        callback_data="no_effect"
    )
    
    builder.adjust(1, 1, 1, 1)
    await message.answer(
        text="–í–∞—à –ø—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
        reply_markup=builder.as_markup()
    )
    

@god_mod_router.callback_query(F.data == "inst_god_mod")
async def inst_god_mod_callback(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.answer(
        text="""üìù <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–∞—à–µ–≥–æ —Ñ–æ—Ç–æ?</b>
1Ô∏è‚É£ –£–∫–∞–∂–∏ –∫–∞–∫–æ–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ: –ø–æ—Ä—Ç—Ä–µ—Ç, –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç –∏ —Ç.–¥.

2Ô∏è‚É£ –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å: —Å–ø–æ—Ä—Ç—Å–º–µ–Ω, —Ä–æ–∫-–º—É–∑—ã–∫–∞–Ω—Ç, —Ñ—É—Ç–±–æ–ª–∏—Å—Ç –∏–ª–∏ –∫–æ—Ä–æ–ª–µ–≤–∞.

3Ô∏è‚É£ –ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Å—Ç–∏–ª—å: –æ–¥–µ–∂–¥—É, –ø—Ä–∏—á–µ—Å–∫—É, –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã, —á–µ—Ä—Ç—ã –ª–∏—Ü–∞, —Ñ–∏–≥—É—Ä—É

4Ô∏è‚É£ –¢—â–∞—Ç–µ–ª—å–Ω–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å, –æ–ø–∏—Å–∞–≤ —Ñ–æ–Ω –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–∑–∞–¥–∏ —Ç–µ–±—è, –∫–∞–∫ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –≤—ã–≥–ª—è–¥–µ—Ç—å, –∫–∞–∫–∞—è –ø–æ–∑–∞ —É —Ç–µ–±—è, –∫–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —Ñ–æ—Ç–æ.

5Ô∏è‚É£ –ò–∑–±–µ–≥–∞–π—Ç–µ –¥–ª–∏–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ö–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∏ –∫—Ä–∞—Ç–∫–æ, —Ä–∞–∑–¥–µ–ª—è—è –∑–∞–ø—è—Ç—ã–º–∏.

<b>–î–µ–π—Å—Ç–≤—É–π –ø–æ —ç—Ç–∏–º –ø—Ä–∞–≤–∏–ª–∞–º –∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å–≤–æ–µ –∏–¥–µ–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –≤—Å–µ–≥–æ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥!</b> ‚úÖ
""", parse_mode="HTML")
    

def setup(dp):
    dp.include_router(god_mod_router)
